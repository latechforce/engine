"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7787],{4353:(e,n,l)=>{l.r(n),l.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>c,frontMatter:()=>d,metadata:()=>i,toc:()=>s});const i=JSON.parse('{"id":"api/table/field/rollup/index","title":"Rollup","description":"Represents a field that aggregates values from linked records.","source":"@site/version/latest/api/table/field/rollup/index.md","sourceDirName":"api/table/field/rollup","slug":"/api/table/field/rollup/","permalink":"/api/table/field/rollup/","draft":false,"unlisted":false,"editUrl":"https://github.com/latechforce/engine/tree/main/website/version/latest/api/table/field/rollup/index.md","tags":[],"version":"current","frontMatter":{},"sidebar":"api","previous":{"title":"Number","permalink":"/api/table/field/number"},"next":{"title":"Output","permalink":"/api/table/field/rollup/output"}}');var t=l(4848),r=l(8453);const d={},o="Rollup",a={},s=[{value:"Required",id:"required",level:2},{value:"Name",id:"name",level:3},{value:"Type",id:"type",level:3},{value:"Formula",id:"formula",level:3},{value:"Multiple Linked Record",id:"multiple-linked-record",level:3},{value:"Linked Record Field",id:"linked-record-field",level:3},{value:"Output",id:"output",level:3},{value:"Optional",id:"optional",level:2},{value:"Required",id:"required-1",level:3}];function u(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"rollup",children:"Rollup"})}),"\n",(0,t.jsx)(n.p,{children:"Represents a field that aggregates values from linked records."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'import App, { type Config } from \'@latechforce/engine/bun\'\n\nconst config: Config = {\n  "name": "App with a table with a rollup field",\n  "tables": [\n    {\n      "name": "table_1",\n      "fields": [\n        {\n          "name": "multiple_linked_record",\n          "type": "MultipleLinkedRecord",\n          "table": "table_2"\n        },\n        {\n          "name": "rollup",\n          "type": "Rollup",\n          "multipleLinkedRecord": "multiple_linked_record",\n          "linkedRecordField": "single_line_text",\n          "formula": "CONCAT(values, \', \')",\n          "output": {\n            "type": "SingleLineText"\n          }\n        }\n      ]\n    },\n    {\n      "name": "table_2",\n      "fields": [\n        {\n          "name": "single_line_text",\n          "type": "SingleLineText"\n        }\n      ]\n    }\n  ]\n}\n\nawait new App().start(config)\n'})}),"\n",(0,t.jsx)(n.h2,{id:"required",children:"Required"}),"\n",(0,t.jsx)(n.h3,{id:"name",children:"Name"}),"\n",(0,t.jsx)(n.p,{children:"The name of the field."}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["name: ",(0,t.jsx)(n.code,{children:"string"})]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"type",children:"Type"}),"\n",(0,t.jsx)(n.p,{children:"The type of the field."}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["type: const: ",(0,t.jsx)(n.code,{children:"Rollup"})]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"formula",children:"Formula"}),"\n",(0,t.jsx)(n.p,{children:"The formula expression to calculate the aggregated value."}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["formula: ",(0,t.jsx)(n.code,{children:"string"})]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"multiple-linked-record",children:"Multiple Linked Record"}),"\n",(0,t.jsx)(n.p,{children:"The name of the multiple linked record field to aggregate values from."}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["multipleLinkedRecord: ",(0,t.jsx)(n.code,{children:"string"})]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"linked-record-field",children:"Linked Record Field"}),"\n",(0,t.jsx)(n.p,{children:"The name of the field in the linked record table to aggregate values from."}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["linkedRecordField: ",(0,t.jsx)(n.code,{children:"string"})]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"output",children:"Output"}),"\n",(0,t.jsx)(n.p,{children:"The output type configuration for the rollup field."}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["output: ",(0,t.jsx)(n.a,{href:"/api/table/field/rollup/output",children:"Output"})]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"optional",children:"Optional"}),"\n",(0,t.jsx)(n.h3,{id:"required-1",children:"Required"}),"\n",(0,t.jsxs)(n.p,{children:["Whether the field is required.\nThe default value is ",(0,t.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["required?: ",(0,t.jsx)(n.code,{children:"boolean"})]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'import App, { type Config } from \'@latechforce/engine/bun\'\n\nconst config: Config = {\n  "name": "App with a table with a required rollup field",\n  "tables": [\n    {\n      "name": "table_1",\n      "fields": [\n        {\n          "name": "multiple_linked_record",\n          "type": "MultipleLinkedRecord",\n          "table": "table_2",\n          "required": true\n        },\n        {\n          "name": "rollup",\n          "type": "Rollup",\n          "multipleLinkedRecord": "multiple_linked_record",\n          "linkedRecordField": "single_line_text",\n          "formula": "CONCAT(values, \', \')",\n          "output": {\n            "type": "SingleLineText"\n          },\n          "required": true\n        }\n      ]\n    },\n    {\n      "name": "table_2",\n      "fields": [\n        {\n          "name": "single_line_text",\n          "type": "SingleLineText",\n          "required": true\n        }\n      ]\n    }\n  ]\n}\n\nawait new App().start(config)\n'})})]})}function c(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},8453:(e,n,l)=>{l.d(n,{R:()=>d,x:()=>o});var i=l(6540);const t={},r=i.createContext(t);function d(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);