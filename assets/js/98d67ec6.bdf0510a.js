"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6505],{2366:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>a,contentTitle:()=>s,default:()=>l,frontMatter:()=>o,metadata:()=>i,toc:()=>p});const i=JSON.parse('{"id":"api/automation/action/service/code/runtypescript","title":"Run TypeScript","description":"Executes TypeScript code with the specified input","source":"@site/version/latest/api/automation/action/service/code/runtypescript.md","sourceDirName":"api/automation/action/service/code","slug":"/api/automation/action/service/code/runtypescript","permalink":"/api/automation/action/service/code/runtypescript","draft":false,"unlisted":false,"editUrl":"https://github.com/latechforce/engine/tree/main/website/version/latest/api/automation/action/service/code/runtypescript.md","tags":[],"version":"current","frontMatter":{},"sidebar":"api","previous":{"title":"Run JavaScript","permalink":"/api/automation/action/service/code/runjavascript"},"next":{"title":"Database","permalink":"/api/automation/action/service/database/"}}');var c=t(4848),r=t(8453);const o={},s="Run TypeScript",a={},p=[{value:"Required",id:"required",level:2},{value:"Name",id:"name",level:3},{value:"Service",id:"service",level:3},{value:"Action",id:"action",level:3},{value:"Code",id:"code",level:3},{value:"Optional",id:"optional",level:2},{value:"Input",id:"input",level:3},{value:"Environment Variables",id:"environment-variables",level:3}];function d(n){const e={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,r.R)(),...n.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(e.header,{children:(0,c.jsx)(e.h1,{id:"run-typescript",children:"Run TypeScript"})}),"\n",(0,c.jsx)(e.p,{children:"Executes TypeScript code with the specified input"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-ts",children:'import App, { type Config } from \'@latechforce/engine/bun\'\n\nconst config: Config = {\n  "name": "App with a run typescript action",\n  "automations": [\n    {\n      "name": "run-typescript",\n      "trigger": {\n        "service": "Http",\n        "event": "ApiCalled",\n        "path": "run-typescript",\n        "output": {\n          "message": "{{runTypescriptCode.message}}"\n        }\n      },\n      "actions": [\n        {\n          "service": "Code",\n          "action": "RunTypescript",\n          "name": "runTypescriptCode",\n          "code": "async function() {\\n            return { message: \\"Hello, world!\\" };\\n          }"\n        }\n      ]\n    }\n  ]\n}\n\nawait new App().start(config)\n'})}),"\n",(0,c.jsx)(e.h2,{id:"required",children:"Required"}),"\n",(0,c.jsx)(e.h3,{id:"name",children:"Name"}),"\n",(0,c.jsx)(e.p,{children:"The name for this action"}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsxs)(e.p,{children:["name: ",(0,c.jsx)(e.code,{children:"string"})]}),"\n"]}),"\n",(0,c.jsx)(e.h3,{id:"service",children:"Service"}),"\n",(0,c.jsx)(e.p,{children:"The service type for this action"}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsxs)(e.p,{children:["service: const: ",(0,c.jsx)(e.code,{children:"Code"})]}),"\n"]}),"\n",(0,c.jsx)(e.h3,{id:"action",children:"Action"}),"\n",(0,c.jsx)(e.p,{children:"The action type for this action"}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsxs)(e.p,{children:["action: const: ",(0,c.jsx)(e.code,{children:"RunTypescript"})]}),"\n"]}),"\n",(0,c.jsx)(e.h3,{id:"code",children:"Code"}),"\n",(0,c.jsx)(e.p,{children:"The code for this action"}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsxs)(e.p,{children:["code: ",(0,c.jsx)(e.code,{children:"string"})]}),"\n"]}),"\n",(0,c.jsx)(e.h2,{id:"optional",children:"Optional"}),"\n",(0,c.jsx)(e.h3,{id:"input",children:"Input"}),"\n",(0,c.jsx)(e.p,{children:"The input for this action"}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsxs)(e.p,{children:["input?: ",(0,c.jsx)(e.code,{children:"unknown"})]}),"\n"]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-ts",children:'import App, { type Config } from \'@latechforce/engine/bun\'\n\nconst config: Config = {\n  "name": "App with a run typescript action with input",\n  "automations": [\n    {\n      "name": "run-typescript",\n      "trigger": {\n        "service": "Http",\n        "event": "ApiCalled",\n        "path": "run-typescript-with-input",\n        "input": {\n          "type": "object",\n          "properties": {\n            "text": {\n              "type": "string"\n            }\n          },\n          "required": [\n            "text"\n          ]\n        },\n        "output": {\n          "message": "{{runJavascriptCode.message}}"\n        }\n      },\n      "actions": [\n        {\n          "service": "Code",\n          "action": "RunTypescript",\n          "name": "runJavascriptCode",\n          "input": {\n            "text": "{{trigger.body.text}}"\n          },\n          "code": "async function(context) {\\n            const { text } = context.inputData;\\n            return { message: text };\\n          }"\n        }\n      ]\n    }\n  ]\n}\n\nawait new App().start(config)\n'})}),"\n",(0,c.jsx)(e.h3,{id:"environment-variables",children:"Environment Variables"}),"\n",(0,c.jsx)(e.p,{children:"The environment variables for this action"}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsx)(e.p,{children:"env?: Object"}),"\n"]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-ts",children:'import App, { type Config } from \'@latechforce/engine/bun\'\n\nconst config: Config = {\n  "name": "App with a run typescript action with env",\n  "automations": [\n    {\n      "name": "runTypescriptWithEnv",\n      "trigger": {\n        "service": "Http",\n        "event": "ApiCalled",\n        "path": "run-typescript-with-env",\n        "output": {\n          "nodeEnv": "{{runJavascriptCode.nodeEnv}}"\n        }\n      },\n      "actions": [\n        {\n          "service": "Code",\n          "action": "RunTypescript",\n          "name": "runJavascriptCode",\n          "env": {\n            "NODE_ENV": "xxx"\n          },\n          "code": "async function(context) {\\n            const { env } = context, { NODE_ENV } = env;\\n            return { nodeEnv: NODE_ENV };\\n          }"\n        }\n      ]\n    }\n  ]\n}\n\nawait new App().start(config)\n'})})]})}function l(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,c.jsx)(e,{...n,children:(0,c.jsx)(d,{...n})}):d(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>o,x:()=>s});var i=t(6540);const c={},r=i.createContext(c);function o(n){const e=i.useContext(r);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(c):n.components||c:o(n.components),i.createElement(r.Provider,{value:e},n.children)}}}]);