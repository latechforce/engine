{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$ref": "#/definitions/ConfigSchema",
  "definitions": {
    "ConfigSchema": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the engine",
          "title": "Name"
        },
        "appVersion": {
          "type": "string",
          "description": "The version of the application",
          "title": "App Version",
          "default": "the `version` property of the `package.json` file or `latest`"
        },
        "engineVersion": {
          "type": "string",
          "description": "The version of the engine",
          "title": "Engine Version",
          "default": "the `version` of the dependency `@latechforce/engine` of the `package.json` file"
        },
        "description": {
          "type": "string",
          "description": "The description of the application",
          "title": "Description"
        },
        "forms": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FormSchema"
          },
          "description": "The forms of the application",
          "title": "Forms"
        },
        "automations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AutomationSchema"
          },
          "description": "The automations of the application",
          "title": "Automations"
        },
        "tables": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TableSchema"
          },
          "description": "The tables of the application",
          "title": "Tables"
        },
        "buckets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BucketSchema"
          },
          "description": "The buckets of the application",
          "title": "Buckets"
        },
        "integrations": {
          "$ref": "#/definitions/IntegrationSchema",
          "description": "The integrations of the application",
          "title": "Integrations"
        },
        "services": {
          "$ref": "#/definitions/ServiceSchema",
          "description": "The services of the application",
          "title": "Services"
        }
      },
      "required": [
        "name"
      ],
      "additionalProperties": false,
      "description": "This is the configuration of the engine.",
      "title": "Config"
    },
    "FormSchema": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the form.",
          "title": "Name"
        },
        "path": {
          "type": "string",
          "description": "The URL path where the form is accessible.",
          "title": "Path"
        },
        "title": {
          "type": "string",
          "description": "The display title of the form.",
          "title": "Title"
        },
        "description": {
          "type": "string",
          "description": "The description of the form.",
          "title": "Description"
        },
        "table": {
          "type": "string",
          "description": "The name of the table this form is associated with.",
          "title": "Table"
        },
        "inputs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InputFormSchema"
          },
          "description": "The input fields of the form.",
          "title": "Inputs"
        },
        "submitLabel": {
          "type": "string",
          "description": "The text displayed on the submit button.",
          "title": "Submit label"
        },
        "successMessage": {
          "type": "string",
          "description": "The message displayed after successful form submission.",
          "title": "Success message"
        }
      },
      "required": [
        "name",
        "path",
        "table",
        "inputs"
      ],
      "additionalProperties": false,
      "description": "Defines a form for data input and submission",
      "title": "Form"
    },
    "InputFormSchema": {
      "type": "object",
      "properties": {
        "field": {
          "type": "string",
          "description": "The name of the field this input is associated with",
          "title": "Field"
        },
        "label": {
          "type": "string",
          "description": "The display label for the input field",
          "title": "Label"
        },
        "description": {
          "type": "string",
          "description": "The description of the input field",
          "title": "Description"
        },
        "placeholder": {
          "type": "string",
          "description": "The placeholder text for the input field",
          "title": "Placeholder"
        },
        "required": {
          "type": "boolean",
          "description": "Whether the input field is required",
          "title": "Required"
        },
        "minLength": {
          "type": "number",
          "description": "The minimum length of the input value",
          "title": "Min Length"
        },
        "maxLength": {
          "type": "number",
          "description": "The maximum length of the input value",
          "title": "Max Length"
        }
      },
      "required": [
        "field"
      ],
      "additionalProperties": false,
      "description": "Configuration for form input fields",
      "title": "Input"
    },
    "AutomationSchema": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the automation.",
          "title": "Name"
        },
        "description": {
          "type": "string",
          "description": "The description of the automation.",
          "title": "Description"
        },
        "trigger": {
          "$ref": "#/definitions/TriggerAutomationSchema",
          "description": "The trigger that starts the automation.",
          "title": "Trigger"
        },
        "actions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActionAutomationSchema"
          },
          "description": "The actions that are executed when the trigger is activated.",
          "title": "Actions"
        }
      },
      "required": [
        "actions",
        "name",
        "trigger"
      ],
      "additionalProperties": false,
      "description": "Defines an automation workflow with triggers and actions",
      "title": "Automation"
    },
    "TriggerAutomationSchema": {
      "anyOf": [
        {
          "$ref": "#/definitions/ServiceTriggerAutomationSchema"
        },
        {
          "$ref": "#/definitions/IntegrationTriggerAutomationSchema"
        }
      ],
      "description": "Union type of all possible triggers that can start automations",
      "title": "Trigger"
    },
    "ServiceTriggerAutomationSchema": {
      "anyOf": [
        {
          "$ref": "#/definitions/DatabaseServiceTriggerAutomationSchema"
        },
        {
          "$ref": "#/definitions/HttpServiceTriggerAutomationSchema"
        },
        {
          "$ref": "#/definitions/ScheduleServiceTriggerAutomationSchema"
        }
      ],
      "description": "Union type of all possible service triggers that can start automations",
      "title": "Service"
    },
    "DatabaseServiceTriggerAutomationSchema": {
      "$ref": "#/definitions/RecordCreatedDatabaseServiceTriggerAutomationSchema",
      "description": "The Database service trigger.",
      "title": "Database"
    },
    "RecordCreatedDatabaseServiceTriggerAutomationSchema": {
      "type": "object",
      "properties": {
        "service": {
          "type": "string",
          "const": "Database",
          "description": "The service type for this trigger",
          "title": "Service"
        },
        "event": {
          "type": "string",
          "const": "RecordCreated",
          "description": "The event type for this trigger",
          "title": "Event"
        },
        "table": {
          "type": "string",
          "description": "The table name for this trigger",
          "title": "Table"
        }
      },
      "required": [
        "service",
        "event",
        "table"
      ],
      "additionalProperties": false,
      "description": "A trigger that fires when a record is created in a database",
      "title": "Record Created"
    },
    "HttpServiceTriggerAutomationSchema": {
      "anyOf": [
        {
          "$ref": "#/definitions/ApiCalledHttpServiceTriggerAutomationSchema"
        },
        {
          "$ref": "#/definitions/WebhookCalledHttpServiceTriggerAutomationSchema"
        }
      ],
      "description": "The Http service trigger.",
      "title": "Http"
    },
    "ApiCalledHttpServiceTriggerAutomationSchema": {
      "type": "object",
      "properties": {
        "service": {
          "type": "string",
          "const": "Http",
          "description": "The service type for this trigger",
          "title": "Service"
        },
        "event": {
          "type": "string",
          "const": "ApiCalled",
          "description": "The event type for this trigger",
          "title": "Event"
        },
        "path": {
          "type": "string",
          "description": "The API endpoint path where the trigger will be activated",
          "title": "Path"
        },
        "input": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "string",
                "number",
                "boolean",
                "array",
                "object"
              ]
            },
            "properties": {
              "type": "object",
              "additionalProperties": {}
            },
            "enum": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "items": {},
            "required": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "additionalProperties": {
              "type": "boolean"
            },
            "oneOf": {
              "type": "array",
              "items": {}
            }
          },
          "additionalProperties": false,
          "description": "The JSON schema for validating the input data",
          "title": "Input"
        },
        "output": {
          "type": "object",
          "additionalProperties": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "object",
                "properties": {
                  "number": {
                    "type": "string"
                  }
                },
                "required": [
                  "number"
                ],
                "additionalProperties": false
              },
              {
                "type": "object",
                "properties": {
                  "boolean": {
                    "type": "string"
                  }
                },
                "required": [
                  "boolean"
                ],
                "additionalProperties": false
              },
              {
                "type": "object",
                "properties": {
                  "json": {
                    "type": "string"
                  }
                },
                "required": [
                  "json"
                ],
                "additionalProperties": false
              },
              {},
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              {
                "type": "number"
              },
              {
                "type": "boolean"
              },
              {
                "not": {}
              }
            ]
          },
          "description": "The template for formatting the output response",
          "title": "Output"
        },
        "auth": {
          "type": "string",
          "const": "ApiKey",
          "description": "The authentication settings for the API endpoint",
          "title": "Auth"
        }
      },
      "required": [
        "service",
        "event",
        "path"
      ],
      "additionalProperties": false,
      "description": "A trigger that fires when an API is called",
      "title": "Api Called"
    },
    "WebhookCalledHttpServiceTriggerAutomationSchema": {
      "type": "object",
      "properties": {
        "service": {
          "type": "string",
          "const": "Http",
          "description": "The service type for this trigger",
          "title": "Service"
        },
        "event": {
          "type": "string",
          "const": "WebhookCalled",
          "description": "The event type for this trigger",
          "title": "Event"
        },
        "path": {
          "type": "string",
          "description": "The path for this trigger",
          "title": "Path"
        },
        "auth": {
          "description": "The authentication configuration for this trigger",
          "title": "Authentication"
        }
      },
      "required": [
        "service",
        "event",
        "path"
      ],
      "additionalProperties": false,
      "description": "A trigger that fires when a webhook is called",
      "title": "Webhook Called"
    },
    "ScheduleServiceTriggerAutomationSchema": {
      "$ref": "#/definitions/CronTimeTickedScheduleServiceTriggerAutomationSchema",
      "description": "The Schedule service trigger.",
      "title": "Schedule"
    },
    "CronTimeTickedScheduleServiceTriggerAutomationSchema": {
      "type": "object",
      "properties": {
        "service": {
          "type": "string",
          "const": "Schedule",
          "description": "The service type for this trigger",
          "title": "Service"
        },
        "event": {
          "type": "string",
          "const": "CronTimeTicked",
          "description": "The event type for this trigger",
          "title": "Event"
        },
        "cronTime": {
          "type": "string",
          "description": "The cron time for this trigger",
          "title": "Cron Time"
        }
      },
      "required": [
        "service",
        "event",
        "cronTime"
      ],
      "additionalProperties": false,
      "description": "A trigger that fires when a cron time is ticked",
      "title": "Cron Time Ticked"
    },
    "IntegrationTriggerAutomationSchema": {
      "anyOf": [
        {
          "$ref": "#/definitions/CalendlyIntegrationTriggerAutomationSchema"
        },
        {
          "$ref": "#/definitions/NotionIntegrationTriggerAutomationSchema"
        },
        {
          "$ref": "#/definitions/JotformIntegrationTriggerAutomationSchema"
        },
        {
          "$ref": "#/definitions/YouCanBookMeIntegrationTriggerAutomationSchema"
        }
      ],
      "description": "Union type of all possible integration triggers that can start automations",
      "title": "Integration"
    },
    "CalendlyIntegrationTriggerAutomationSchema": {
      "$ref": "#/definitions/InviteeCreatedCalendlyIntegrationTriggerAutomationSchema",
      "description": "The Calendly integration trigger.",
      "title": "Calendly"
    },
    "InviteeCreatedCalendlyIntegrationTriggerAutomationSchema": {
      "type": "object",
      "properties": {
        "integration": {
          "type": "string",
          "const": "Calendly",
          "description": "The integration type for this trigger",
          "title": "Integration"
        },
        "event": {
          "type": "string",
          "const": "InviteeCreated",
          "description": "The event type for this trigger",
          "title": "Event"
        },
        "account": {
          "type": "string",
          "description": "The account identifier for this trigger",
          "title": "Account"
        }
      },
      "required": [
        "integration",
        "event",
        "account"
      ],
      "additionalProperties": false,
      "description": "A trigger that fires when an invitee is created in Calendly",
      "title": "Invitee Created"
    },
    "NotionIntegrationTriggerAutomationSchema": {
      "$ref": "#/definitions/TablePageCreatedNotionIntegrationTriggerAutomationSchema",
      "description": "The Notion integration trigger.",
      "title": "Notion"
    },
    "TablePageCreatedNotionIntegrationTriggerAutomationSchema": {
      "type": "object",
      "properties": {
        "integration": {
          "type": "string",
          "const": "Notion",
          "description": "The integration type for this trigger",
          "title": "Integration"
        },
        "event": {
          "type": "string",
          "const": "TablePageCreated",
          "description": "The event type for this trigger",
          "title": "Event"
        },
        "table": {
          "type": "string",
          "description": "The database identifier for this trigger",
          "title": "Database"
        },
        "account": {
          "type": "string",
          "description": "The account identifier for this trigger",
          "title": "Account"
        }
      },
      "required": [
        "integration",
        "event",
        "table",
        "account"
      ],
      "additionalProperties": false,
      "description": "A trigger that fires when a table page is created in Notion",
      "title": "Table Page Created"
    },
    "JotformIntegrationTriggerAutomationSchema": {
      "$ref": "#/definitions/FormWebhookReceivedJotformIntegrationTriggerAutomationSchema",
      "description": "The Jotform integration trigger.",
      "title": "Jotform"
    },
    "FormWebhookReceivedJotformIntegrationTriggerAutomationSchema": {
      "type": "object",
      "properties": {
        "integration": {
          "type": "string",
          "const": "Jotform",
          "description": "The integration type for this trigger",
          "title": "Integration"
        },
        "event": {
          "type": "string",
          "const": "FormWebhookReceived",
          "description": "The event type for this trigger",
          "title": "Event"
        },
        "formId": {
          "type": "string",
          "description": "The form identifier for this trigger",
          "title": "Form"
        },
        "account": {
          "type": "string",
          "description": "The account identifier for this trigger",
          "title": "Account"
        }
      },
      "required": [
        "integration",
        "event",
        "formId",
        "account"
      ],
      "additionalProperties": false,
      "description": "A trigger that fires when form webhook is received in Jotform",
      "title": "Form Webhook Received"
    },
    "YouCanBookMeIntegrationTriggerAutomationSchema": {
      "$ref": "#/definitions/BookingCreatedYouCanBookMeIntegrationTriggerAutomationSchema",
      "description": "The YouCanBookMe integration trigger.",
      "title": "YouCanBookMe"
    },
    "BookingCreatedYouCanBookMeIntegrationTriggerAutomationSchema": {
      "type": "object",
      "properties": {
        "integration": {
          "type": "string",
          "const": "YouCanBookMe",
          "description": "The integration type for this trigger",
          "title": "Integration"
        },
        "event": {
          "type": "string",
          "const": "BookingCreated",
          "description": "The event type for this trigger",
          "title": "Event"
        },
        "account": {
          "type": "string",
          "description": "The account identifier for this trigger",
          "title": "Account"
        }
      },
      "required": [
        "integration",
        "event",
        "account"
      ],
      "additionalProperties": false,
      "description": "A trigger that fires when a booking is created in YouCanBookMe",
      "title": "Booking Created"
    },
    "ActionAutomationSchema": {
      "anyOf": [
        {
          "$ref": "#/definitions/IntegrationActionAutomationSchema"
        },
        {
          "$ref": "#/definitions/ServiceActionAutomationSchema"
        }
      ],
      "description": "Union type of all possible actions that can be performed in automations",
      "examples": [
        {
          "service": "Database",
          "action": "ReadRecord",
          "table": "users",
          "id": "user_123"
        }
      ],
      "title": "Action"
    },
    "IntegrationActionAutomationSchema": {
      "anyOf": [
        {
          "$ref": "#/definitions/PappersIntegrationActionAutomationSchema"
        },
        {
          "$ref": "#/definitions/QontoIntegrationActionAutomationSchema"
        },
        {
          "$ref": "#/definitions/NotionIntegrationActionAutomationSchema"
        },
        {
          "$ref": "#/definitions/GoogleIntegrationActionAutomationSchema"
        },
        {
          "$ref": "#/definitions/GoCardlessIntegrationActionAutomationSchema"
        }
      ],
      "description": "Union type of all possible integration actions that can be performed in automations",
      "examples": [
        {
          "service": "Integration",
          "action": "GetCompany",
          "companyId": "123"
        }
      ],
      "title": "Integration"
    },
    "PappersIntegrationActionAutomationSchema": {
      "$ref": "#/definitions/GetCompanyPappersIntegrationActionAutomationSchema",
      "description": "The Pappers integration action.",
      "title": "Pappers"
    },
    "GetCompanyPappersIntegrationActionAutomationSchema": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name for this action",
          "title": "Name"
        },
        "integration": {
          "type": "string",
          "const": "Pappers",
          "description": "The integration type for this action",
          "title": "Integration"
        },
        "action": {
          "type": "string",
          "const": "GetCompany",
          "description": "The action type for this action",
          "title": "Action"
        },
        "siret": {
          "type": "string",
          "description": "The siret for this action",
          "title": "Siret"
        },
        "account": {
          "type": "string",
          "description": "The account identifier for this action",
          "title": "Account"
        }
      },
      "required": [
        "name",
        "integration",
        "action",
        "siret",
        "account"
      ],
      "additionalProperties": false,
      "description": "Retrieves company information using Pappers integration",
      "title": "Get Company"
    },
    "QontoIntegrationActionAutomationSchema": {
      "anyOf": [
        {
          "$ref": "#/definitions/CreateClientQontoIntegrationActionAutomationSchema"
        },
        {
          "$ref": "#/definitions/RetrieveAttachmentQontoIntegrationActionAutomationSchema"
        }
      ],
      "description": "The Qonto integration action.",
      "title": "Qonto"
    },
    "CreateClientQontoIntegrationActionAutomationSchema": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name for this action",
          "title": "Name"
        },
        "integration": {
          "type": "string",
          "const": "Qonto",
          "description": "The integration type for this action",
          "title": "Integration"
        },
        "action": {
          "type": "string",
          "const": "CreateClient",
          "description": "The action type for this action",
          "title": "Action"
        },
        "client": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "currency": {
              "type": "string"
            },
            "email": {
              "type": "string"
            },
            "vat_number": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "first_name": {
              "type": "string"
            },
            "last_name": {
              "type": "string"
            },
            "type": {
              "type": "string"
            },
            "tax_identification_number": {
              "type": "string"
            },
            "address": {
              "type": "string"
            },
            "city": {
              "type": "string"
            },
            "zip_code": {
              "type": "string"
            },
            "country_code": {
              "type": "string"
            },
            "billing_address": {
              "type": "object",
              "properties": {
                "street_address": {
                  "type": "string"
                },
                "city": {
                  "type": "string"
                },
                "zip_code": {
                  "type": "string"
                },
                "province_code": {
                  "type": "string"
                },
                "country_code": {
                  "type": "string"
                }
              },
              "required": [
                "street_address",
                "city",
                "zip_code",
                "province_code",
                "country_code"
              ],
              "additionalProperties": false
            },
            "delivery_address": {
              "type": "object",
              "properties": {
                "street_address": {
                  "type": "string"
                },
                "city": {
                  "type": "string"
                },
                "zip_code": {
                  "type": "string"
                },
                "province_code": {
                  "type": "string"
                },
                "country_code": {
                  "type": "string"
                }
              },
              "required": [
                "street_address",
                "city",
                "zip_code",
                "province_code",
                "country_code"
              ],
              "additionalProperties": false
            },
            "locale": {
              "type": "string"
            }
          },
          "required": [
            "address",
            "city",
            "country_code",
            "currency",
            "locale",
            "type",
            "zip_code"
          ],
          "description": "The client for this action",
          "title": "Client"
        },
        "account": {
          "type": "string",
          "description": "The account identifier for this action",
          "title": "Account"
        }
      },
      "required": [
        "name",
        "integration",
        "action",
        "client",
        "account"
      ],
      "additionalProperties": false,
      "description": "Creates a new client in Qonto with the specified details",
      "title": "Create Client"
    },
    "RetrieveAttachmentQontoIntegrationActionAutomationSchema": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name for this action",
          "title": "Name"
        },
        "integration": {
          "type": "string",
          "const": "Qonto",
          "description": "The integration type for this action",
          "title": "Integration"
        },
        "action": {
          "type": "string",
          "const": "RetrieveAttachment",
          "description": "The action type for this action",
          "title": "Action"
        },
        "attachmentId": {
          "type": "string",
          "description": "The attachment identifier for this action",
          "title": "Attachment"
        },
        "account": {
          "type": "string",
          "description": "The account identifier for this action",
          "title": "Account"
        }
      },
      "required": [
        "name",
        "integration",
        "action",
        "attachmentId",
        "account"
      ],
      "additionalProperties": false,
      "description": "Retrieves an attachment using Qonto integration",
      "title": "Retrieve Attachment"
    },
    "NotionIntegrationActionAutomationSchema": {
      "$ref": "#/definitions/UpdatePageNotionIntegrationActionAutomationSchema",
      "description": "The Notion integration action.",
      "title": "Notion"
    },
    "UpdatePageNotionIntegrationActionAutomationSchema": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name for this action",
          "title": "Name"
        },
        "integration": {
          "type": "string",
          "const": "Notion",
          "description": "The integration type for this action",
          "title": "Integration"
        },
        "action": {
          "type": "string",
          "const": "UpdatePage",
          "description": "The action type for this action",
          "title": "Action"
        },
        "table": {
          "type": "string",
          "description": "The table identifier for this action",
          "title": "Table"
        },
        "id": {
          "type": "string",
          "description": "The page identifier for this action",
          "title": "Page"
        },
        "page": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "The page identifier for this action",
          "title": "Page"
        },
        "account": {
          "type": "string",
          "description": "The account identifier for this action",
          "title": "Account"
        }
      },
      "required": [
        "name",
        "integration",
        "action",
        "table",
        "id",
        "page",
        "account"
      ],
      "additionalProperties": false,
      "description": "Updates a page in Notion with the specified properties",
      "title": "Update Page"
    },
    "GoogleIntegrationActionAutomationSchema": {
      "$ref": "#/definitions/MailGoogleIntegrationActionAutomationSchema",
      "description": "The Google integration action.",
      "title": "Google"
    },
    "MailGoogleIntegrationActionAutomationSchema": {
      "$ref": "#/definitions/SendEmailMailGoogleIntegrationActionAutomationSchema",
      "description": "The Google Mail integration action.",
      "title": "Mail"
    },
    "SendEmailMailGoogleIntegrationActionAutomationSchema": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name for this action",
          "title": "Name"
        },
        "integration": {
          "type": "string",
          "const": "GoogleMail",
          "description": "The integration type for this action",
          "title": "Integration"
        },
        "action": {
          "type": "string",
          "const": "SendEmail",
          "description": "The action type for this action",
          "title": "Action"
        },
        "email": {
          "type": "object",
          "properties": {
            "from": {
              "type": "string"
            },
            "to": {
              "type": "string"
            },
            "cc": {
              "type": "string"
            },
            "bcc": {
              "type": "string"
            },
            "subject": {
              "type": "string"
            },
            "text": {
              "type": "string"
            },
            "html": {
              "type": "string"
            }
          },
          "required": [
            "to"
          ],
          "additionalProperties": false,
          "description": "The email for this action",
          "title": "Email"
        },
        "account": {
          "type": "string",
          "description": "The account identifier for this action",
          "title": "Account"
        }
      },
      "required": [
        "name",
        "integration",
        "action",
        "email",
        "account"
      ],
      "additionalProperties": false,
      "description": "Sends an email using Google Mail integration",
      "title": "Send Email"
    },
    "GoCardlessIntegrationActionAutomationSchema": {
      "anyOf": [
        {
          "$ref": "#/definitions/CreatePaymentGoCardlessIntegrationActionAutomationSchema"
        },
        {
          "$ref": "#/definitions/ListPaymentsGoCardlessIntegrationActionAutomationSchema"
        }
      ],
      "description": "The GoCardless integration action.",
      "title": "GoCardless"
    },
    "CreatePaymentGoCardlessIntegrationActionAutomationSchema": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name for this action",
          "title": "Name"
        },
        "integration": {
          "type": "string",
          "const": "GoCardless",
          "description": "The integration type for this action",
          "title": "Integration"
        },
        "action": {
          "type": "string",
          "const": "CreatePayment",
          "description": "The action type for this action",
          "title": "Action"
        },
        "payment": {
          "type": "object",
          "properties": {
            "amount": {
              "type": "number"
            },
            "currency": {
              "type": "string"
            },
            "charge_date": {
              "type": "string"
            },
            "reference": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "metadata": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "retry_if_possible": {
              "type": "boolean"
            },
            "mandate": {
              "type": "string"
            }
          },
          "required": [
            "amount",
            "currency",
            "mandate"
          ],
          "additionalProperties": false,
          "description": "The payment for this action",
          "title": "Payment"
        },
        "account": {
          "type": "string",
          "description": "The account identifier for this action",
          "title": "Account"
        }
      },
      "required": [
        "name",
        "integration",
        "action",
        "payment",
        "account"
      ],
      "additionalProperties": false,
      "description": "Creates a new payment in GoCardless with the specified details",
      "title": "Create Payment"
    },
    "ListPaymentsGoCardlessIntegrationActionAutomationSchema": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name for this action",
          "title": "Name"
        },
        "integration": {
          "type": "string",
          "const": "GoCardless",
          "description": "The integration type for this action",
          "title": "Integration"
        },
        "action": {
          "type": "string",
          "const": "ListPayments",
          "description": "The action type for this action",
          "title": "Action"
        },
        "account": {
          "type": "string",
          "description": "The account identifier for this action",
          "title": "Account"
        },
        "params": {
          "type": "object",
          "properties": {
            "limit": {
              "type": "number"
            },
            "after": {
              "type": "string"
            },
            "before": {
              "type": "string"
            },
            "status": {
              "type": "string"
            },
            "mandate": {
              "type": "string"
            }
          },
          "additionalProperties": false,
          "description": "The parameters for this action",
          "title": "Parameters"
        }
      },
      "required": [
        "name",
        "integration",
        "action",
        "account",
        "params"
      ],
      "additionalProperties": false,
      "description": "Lists payments using GoCardless integration with optional filters",
      "title": "List Payments"
    },
    "ServiceActionAutomationSchema": {
      "anyOf": [
        {
          "$ref": "#/definitions/CodeServiceActionAutomationSchema"
        },
        {
          "$ref": "#/definitions/DatabaseServiceActionAutomationSchema"
        }
      ],
      "description": "Union type of all possible service actions that can be performed in automations",
      "examples": [
        {
          "service": "Service",
          "action": "RunJavascript",
          "code": "console.log(\"Hello, world!\");"
        }
      ],
      "title": "Service"
    },
    "CodeServiceActionAutomationSchema": {
      "anyOf": [
        {
          "$ref": "#/definitions/RunJavascriptCodeServiceActionAutomationSchema"
        },
        {
          "$ref": "#/definitions/RunTypescriptCodeServiceActionAutomationSchema"
        }
      ],
      "description": "The Code action.",
      "title": "Code"
    },
    "RunJavascriptCodeServiceActionAutomationSchema": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name for this action",
          "title": "Name"
        },
        "service": {
          "type": "string",
          "const": "Code",
          "description": "The service type for this action",
          "title": "Service"
        },
        "action": {
          "type": "string",
          "const": "RunJavascript",
          "description": "The action type for this action",
          "title": "Action"
        },
        "code": {
          "type": "string",
          "description": "The code for this action",
          "title": "Code"
        },
        "input": {
          "description": "The input for this action",
          "title": "Input"
        },
        "env": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "The environment variables for this action",
          "title": "Environment Variables"
        }
      },
      "required": [
        "name",
        "service",
        "action",
        "code"
      ],
      "additionalProperties": false,
      "description": "Executes JavaScript code with the specified input",
      "title": "Run JavaScript"
    },
    "RunTypescriptCodeServiceActionAutomationSchema": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name for this action",
          "title": "Name"
        },
        "service": {
          "type": "string",
          "const": "Code",
          "description": "The service type for this action",
          "title": "Service"
        },
        "action": {
          "type": "string",
          "const": "RunTypescript",
          "description": "The action type for this action",
          "title": "Action"
        },
        "code": {
          "type": "string",
          "description": "The code for this action",
          "title": "Code"
        },
        "input": {
          "description": "The input for this action",
          "title": "Input"
        },
        "env": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "The environment variables for this action",
          "title": "Environment Variables"
        }
      },
      "required": [
        "name",
        "service",
        "action",
        "code"
      ],
      "additionalProperties": false,
      "description": "Executes TypeScript code with the specified input",
      "title": "Run TypeScript"
    },
    "DatabaseServiceActionAutomationSchema": {
      "anyOf": [
        {
          "$ref": "#/definitions/ReadRecordDatabaseServiceActionAutomationSchema"
        },
        {
          "$ref": "#/definitions/CreateRecordDatabaseServiceActionAutomationSchema"
        }
      ],
      "description": "The Database service action.",
      "title": "Database"
    },
    "ReadRecordDatabaseServiceActionAutomationSchema": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name for this action",
          "title": "Name"
        },
        "service": {
          "type": "string",
          "const": "Database",
          "description": "The service type for this action",
          "title": "Service"
        },
        "action": {
          "type": "string",
          "const": "ReadRecord",
          "description": "The action type for this action",
          "title": "Action"
        },
        "table": {
          "type": "string",
          "description": "The table name for this action",
          "title": "Table"
        },
        "id": {
          "type": "string",
          "description": "The record identifier for this action",
          "title": "Record"
        }
      },
      "required": [
        "name",
        "service",
        "action",
        "table",
        "id"
      ],
      "additionalProperties": false,
      "description": "Reads a record from the specified database table",
      "title": "Read Record"
    },
    "CreateRecordDatabaseServiceActionAutomationSchema": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name for this action",
          "title": "Name"
        },
        "service": {
          "type": "string",
          "const": "Database",
          "description": "The service type for this action",
          "title": "Service"
        },
        "action": {
          "type": "string",
          "const": "CreateRecord",
          "description": "The action type for this action",
          "title": "Action"
        },
        "table": {
          "type": "string",
          "description": "The table name for this action",
          "title": "Table"
        },
        "fields": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "The fields for this action",
          "title": "Fields"
        }
      },
      "required": [
        "name",
        "service",
        "action",
        "table",
        "fields"
      ],
      "additionalProperties": false,
      "description": "Creates a new record in the specified database table with the given fields",
      "title": "Create Record"
    },
    "TableSchema": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The unique identifier for the table.",
          "title": "Name"
        },
        "schema": {
          "type": "string",
          "description": "The database schema where the table is located.",
          "title": "Schema",
          "default": "`public`"
        },
        "fields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FieldTableSchema"
          },
          "description": "Array of field definitions for the table.",
          "title": "Fields"
        }
      },
      "required": [
        "name"
      ],
      "additionalProperties": false,
      "description": "Defines the structure of a database table.",
      "title": "Table"
    },
    "FieldTableSchema": {
      "anyOf": [
        {
          "$ref": "#/definitions/DateTimeFieldTableSchema"
        },
        {
          "$ref": "#/definitions/EmailFieldTableSchema"
        },
        {
          "$ref": "#/definitions/FormulaFieldTableSchema"
        },
        {
          "$ref": "#/definitions/LongTextFieldTableSchema"
        },
        {
          "$ref": "#/definitions/MultipleLinkedRecordFieldTableSchema"
        },
        {
          "$ref": "#/definitions/NumberFieldTableSchema"
        },
        {
          "$ref": "#/definitions/RollupFieldTableSchema"
        },
        {
          "$ref": "#/definitions/SingleLineTextFieldTableSchema"
        },
        {
          "$ref": "#/definitions/SingleLinkedRecordFieldTableSchema"
        },
        {
          "$ref": "#/definitions/SingleSelectFieldTableSchema"
        },
        {
          "$ref": "#/definitions/MultipleSelectFieldTableSchema"
        },
        {
          "$ref": "#/definitions/CheckboxFieldTableSchema"
        },
        {
          "$ref": "#/definitions/MultipleAttachmentFieldTableSchema"
        },
        {
          "$ref": "#/definitions/UrlFieldTableSchema"
        },
        {
          "$ref": "#/definitions/SingleAttachmentFieldTableSchema"
        }
      ],
      "description": "Union type of all possible field types that can be used in forms and tables.",
      "title": "Field"
    },
    "DateTimeFieldTableSchema": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the field.",
          "title": "Name"
        },
        "type": {
          "type": "string",
          "const": "DateTime",
          "description": "The type of the field.",
          "title": "Type"
        },
        "required": {
          "type": "boolean",
          "description": "Whether the field is required.",
          "title": "Required",
          "default": "`false`"
        }
      },
      "required": [
        "name",
        "type"
      ],
      "additionalProperties": false,
      "description": "Represents a field that stores a date and time.",
      "title": "Date time"
    },
    "EmailFieldTableSchema": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the field.",
          "title": "Name"
        },
        "type": {
          "type": "string",
          "const": "Email",
          "description": "The type of the field.",
          "title": "Type"
        },
        "required": {
          "type": "boolean",
          "description": "Whether the field is required.",
          "title": "Required",
          "default": "`false`"
        }
      },
      "required": [
        "name",
        "type"
      ],
      "additionalProperties": false,
      "description": "Represents a field that stores an email address.",
      "title": "Email"
    },
    "FormulaFieldTableSchema": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the field.",
          "title": "Name"
        },
        "type": {
          "type": "string",
          "const": "Formula",
          "description": "The type of the field.",
          "title": "Type"
        },
        "formula": {
          "type": "string",
          "description": "The formula expression to calculate the field value.",
          "title": "Formula"
        },
        "output": {
          "$ref": "#/definitions/OutputFormulaFieldTableSchema",
          "description": "The output type configuration for the formula field.",
          "title": "Output"
        },
        "required": {
          "type": "boolean",
          "description": "Whether the field is required.",
          "title": "Required",
          "default": "`false`"
        }
      },
      "required": [
        "name",
        "type",
        "formula",
        "output"
      ],
      "additionalProperties": false,
      "description": "Represents a field that calculates a value based on a formula.",
      "title": "Formula"
    },
    "OutputFormulaFieldTableSchema": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "Number",
            "LongText",
            "SingleLineText",
            "DateTime"
          ],
          "description": "The type of the output field.",
          "title": "Type"
        }
      },
      "required": [
        "type"
      ],
      "additionalProperties": false,
      "description": "Represents the output type configuration of a formula field.",
      "title": "Output"
    },
    "LongTextFieldTableSchema": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the field.",
          "title": "Name"
        },
        "type": {
          "type": "string",
          "const": "LongText",
          "description": "The type of the field.",
          "title": "Type"
        },
        "required": {
          "type": "boolean",
          "description": "Whether the field is required.",
          "title": "Required",
          "default": "`false`"
        }
      },
      "required": [
        "name",
        "type"
      ],
      "additionalProperties": false,
      "description": "Represents a field that stores multiple lines of text.",
      "title": "Long text"
    },
    "MultipleLinkedRecordFieldTableSchema": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the field.",
          "title": "Name"
        },
        "type": {
          "type": "string",
          "const": "MultipleLinkedRecord",
          "description": "The type of the field.",
          "title": "Type"
        },
        "table": {
          "type": "string",
          "description": "The name of the table to link to.",
          "title": "Table"
        },
        "required": {
          "type": "boolean",
          "description": "Whether the field is required.",
          "title": "Required",
          "default": "`false`"
        }
      },
      "required": [
        "name",
        "type",
        "table"
      ],
      "additionalProperties": false,
      "description": "Represents a field that links to multiple records in another table.",
      "title": "Multiple linked record"
    },
    "NumberFieldTableSchema": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the field.",
          "title": "Name"
        },
        "type": {
          "type": "string",
          "const": "Number",
          "description": "The type of the field.",
          "title": "Type"
        },
        "required": {
          "type": "boolean",
          "description": "Whether the field is required.",
          "title": "Required",
          "default": "`false`"
        }
      },
      "required": [
        "name",
        "type"
      ],
      "additionalProperties": false,
      "description": "Represents a field that stores a numeric value.",
      "title": "Number"
    },
    "RollupFieldTableSchema": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the field.",
          "title": "Name"
        },
        "type": {
          "type": "string",
          "const": "Rollup",
          "description": "The type of the field.",
          "title": "Type"
        },
        "formula": {
          "type": "string",
          "description": "The formula expression to calculate the aggregated value.",
          "title": "Formula"
        },
        "multipleLinkedRecord": {
          "type": "string",
          "description": "The name of the multiple linked record field to aggregate values from.",
          "title": "Multiple Linked Record"
        },
        "linkedRecordField": {
          "type": "string",
          "description": "The name of the field in the linked record table to aggregate values from.",
          "title": "Linked Record Field"
        },
        "output": {
          "$ref": "#/definitions/OutputRollupFieldTableSchema",
          "description": "The output type configuration for the rollup field.",
          "title": "Output"
        },
        "required": {
          "type": "boolean",
          "description": "Whether the field is required.",
          "title": "Required",
          "default": "`false`"
        }
      },
      "required": [
        "name",
        "type",
        "formula",
        "multipleLinkedRecord",
        "linkedRecordField",
        "output"
      ],
      "additionalProperties": false,
      "description": "Represents a field that aggregates values from linked records.",
      "title": "Rollup"
    },
    "OutputRollupFieldTableSchema": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "Number",
            "LongText",
            "SingleLineText",
            "DateTime"
          ],
          "description": "The type of the output field.",
          "title": "Type"
        }
      },
      "required": [
        "type"
      ],
      "additionalProperties": false,
      "description": "Represents the output type configuration of a rollup field.",
      "title": "Output"
    },
    "SingleLineTextFieldTableSchema": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the field.",
          "title": "Name"
        },
        "type": {
          "type": "string",
          "const": "SingleLineText",
          "description": "The type of the field.",
          "title": "Type"
        },
        "required": {
          "type": "boolean",
          "description": "Whether the field is required.",
          "title": "Required",
          "default": "`false`"
        }
      },
      "required": [
        "name",
        "type"
      ],
      "additionalProperties": false,
      "description": "Represents a field that stores a single line of text.",
      "title": "Single line text"
    },
    "SingleLinkedRecordFieldTableSchema": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the field.",
          "title": "Name"
        },
        "type": {
          "type": "string",
          "const": "SingleLinkedRecord",
          "description": "The type of the field.",
          "title": "Type"
        },
        "table": {
          "type": "string",
          "description": "The name of the table to link to.",
          "title": "Table"
        },
        "required": {
          "type": "boolean",
          "description": "Whether the field is required.",
          "title": "Required",
          "default": "`false`"
        }
      },
      "required": [
        "name",
        "type",
        "table"
      ],
      "additionalProperties": false,
      "description": "Represents a field that links to a single record in another table.",
      "title": "Single linked record"
    },
    "SingleSelectFieldTableSchema": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the field.",
          "title": "Name"
        },
        "type": {
          "type": "string",
          "const": "SingleSelect",
          "description": "The type of the field.",
          "title": "Type"
        },
        "options": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The options of the field.",
          "title": "Options"
        },
        "required": {
          "type": "boolean",
          "description": "Whether the field is required.",
          "title": "Required",
          "default": "`false`"
        }
      },
      "required": [
        "name",
        "type",
        "options"
      ],
      "additionalProperties": false,
      "description": "Represents a field that allows selecting a single option from a predefined list.",
      "title": "Single select"
    },
    "MultipleSelectFieldTableSchema": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the field.",
          "title": "Name"
        },
        "type": {
          "type": "string",
          "const": "MultipleSelect",
          "description": "The type of the field.",
          "title": "Type"
        },
        "options": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The options of the field.",
          "title": "Options"
        },
        "required": {
          "type": "boolean",
          "description": "Whether the field is required.",
          "title": "Required",
          "default": "`false`"
        }
      },
      "required": [
        "name",
        "type",
        "options"
      ],
      "additionalProperties": false,
      "description": "Represents a field that allows selecting multiple options from a predefined list.",
      "title": "Multiple select"
    },
    "CheckboxFieldTableSchema": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the field.",
          "title": "Name"
        },
        "type": {
          "type": "string",
          "const": "Checkbox",
          "description": "The type of the field.",
          "title": "Type"
        },
        "required": {
          "type": "boolean",
          "description": "Whether the field is required.",
          "title": "Required",
          "default": "`false`"
        }
      },
      "required": [
        "name",
        "type"
      ],
      "additionalProperties": false,
      "description": "Represents a boolean checkbox field in forms and tables.",
      "title": "Checkbox"
    },
    "MultipleAttachmentFieldTableSchema": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the field.",
          "title": "Name"
        },
        "type": {
          "type": "string",
          "const": "MultipleAttachment",
          "description": "The type of the field.",
          "title": "Type"
        },
        "required": {
          "type": "boolean",
          "description": "Whether the field is required.",
          "title": "Required",
          "default": "`false`"
        }
      },
      "required": [
        "name",
        "type"
      ],
      "additionalProperties": false,
      "description": "Represents a field that stores multiple attachments.",
      "title": "Multiple attachment"
    },
    "UrlFieldTableSchema": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the field.",
          "title": "Name"
        },
        "type": {
          "type": "string",
          "const": "Url",
          "description": "The type of the field.",
          "title": "Type"
        },
        "required": {
          "type": "boolean",
          "description": "Whether the field is required.",
          "title": "Required",
          "default": "`false`"
        }
      },
      "required": [
        "name",
        "type"
      ],
      "additionalProperties": false,
      "description": "Represents a field that stores an URL.",
      "title": "Url"
    },
    "SingleAttachmentFieldTableSchema": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the field.",
          "title": "Name"
        },
        "type": {
          "type": "string",
          "const": "SingleAttachment",
          "description": "The type of the field.",
          "title": "Type"
        },
        "required": {
          "type": "boolean",
          "description": "Whether the field is required.",
          "title": "Required",
          "default": "`false`"
        }
      },
      "required": [
        "name",
        "type"
      ],
      "additionalProperties": false,
      "description": "Represents a field that stores a single attachment.",
      "title": "Single attachment"
    },
    "BucketSchema": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the bucket.",
          "title": "Name"
        }
      },
      "required": [
        "name"
      ],
      "additionalProperties": false,
      "description": "Defines a storage bucket for file management",
      "title": "Bucket"
    },
    "IntegrationSchema": {
      "type": "object",
      "properties": {
        "airtable": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AirtableIntegrationSchema"
          },
          "description": "Configuration for Airtable integrations.",
          "title": "Airtable"
        },
        "notion": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NotionIntegrationSchema"
          },
          "description": "Configuration for Notion integrations.",
          "title": "Notion"
        },
        "pappers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PappersIntegrationSchema"
          },
          "description": "Configuration for Pappers integrations.",
          "title": "Pappers"
        },
        "qonto": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/QontoIntegrationSchema"
          },
          "description": "Configuration for Qonto integrations.",
          "title": "Qonto"
        },
        "google": {
          "$ref": "#/definitions/GoogleIntegrationSchema",
          "description": "Configuration for Google integrations.",
          "title": "Google"
        },
        "gocardless": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GoCardlessIntegrationSchema"
          },
          "description": "Configuration for GoCardless integrations.",
          "title": "GoCardless"
        },
        "phantombuster": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PhantombusterIntegrationSchema"
          },
          "description": "Configuration for Phantombuster integrations.",
          "title": "Phantombuster"
        },
        "calendly": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CalendlyIntegrationSchema"
          },
          "description": "Configuration for Calendly integrations.",
          "title": "Calendly"
        },
        "youcanbookme": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/YouCanBookMeIntegrationSchema"
          },
          "description": "Configuration for YouCanBookMe integrations.",
          "title": "YouCanBookMe"
        },
        "jotform": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/JotformIntegrationSchema"
          },
          "description": "Configuration for Jotform integrations.",
          "title": "Jotform"
        }
      },
      "additionalProperties": false,
      "description": "Defines configurations for various third-party service integrations",
      "title": "Integrations"
    },
    "AirtableIntegrationSchema": {
      "type": "object",
      "properties": {
        "account": {
          "type": "string",
          "description": "The account identifier for the Airtable integration",
          "title": "Account"
        },
        "baseUrl": {
          "type": "string",
          "description": "The base URL for Airtable API",
          "title": "Base URL"
        },
        "apiKey": {
          "type": "string",
          "description": "The API key for Airtable",
          "title": "API Key"
        },
        "databaseId": {
          "type": "string",
          "description": "The database ID for Airtable",
          "title": "Database ID"
        }
      },
      "required": [
        "account",
        "apiKey",
        "databaseId"
      ],
      "additionalProperties": false,
      "description": "A configuration schema for Airtable integration",
      "title": "Airtable"
    },
    "NotionIntegrationSchema": {
      "type": "object",
      "properties": {
        "account": {
          "type": "string",
          "description": "The account identifier for the Notion integration",
          "title": "Account"
        },
        "baseUrl": {
          "type": "string",
          "description": "The base URL for the Notion API",
          "title": "Base URL"
        },
        "token": {
          "type": "string",
          "description": "The authentication token for the Notion API",
          "title": "Token"
        },
        "pollingInterval": {
          "type": "number",
          "description": "The interval in milliseconds for polling Notion API",
          "title": "Polling Interval"
        }
      },
      "required": [
        "account",
        "token"
      ],
      "additionalProperties": false,
      "description": "A configuration schema for Notion integration",
      "title": "Notion"
    },
    "PappersIntegrationSchema": {
      "type": "object",
      "properties": {
        "account": {
          "type": "string",
          "description": "The account identifier for the Pappers integration",
          "title": "Account"
        },
        "apiKey": {
          "type": "string",
          "description": "The API key for authenticating with Pappers",
          "title": "API Key"
        },
        "baseUrl": {
          "type": "string",
          "description": "The base URL for the Pappers API",
          "title": "Base URL"
        }
      },
      "required": [
        "account",
        "apiKey"
      ],
      "additionalProperties": false,
      "description": "A configuration schema for Pappers integration",
      "title": "Pappers"
    },
    "QontoIntegrationSchema": {
      "type": "object",
      "properties": {
        "account": {
          "type": "string",
          "description": "The account identifier for the Qonto integration",
          "title": "Account"
        },
        "organisationSlug": {
          "type": "string",
          "description": "The unique identifier for your Qonto organisation",
          "title": "Organisation Slug"
        },
        "secretKey": {
          "type": "string",
          "description": "The API secret key used to authenticate with Qonto",
          "title": "Secret Key"
        },
        "stagingToken": {
          "type": "string",
          "description": "Optional token used for testing with Qonto staging environment",
          "title": "Staging Token"
        },
        "baseUrl": {
          "type": "string",
          "description": "Optional custom base URL for Qonto API endpoints",
          "title": "Base URL"
        }
      },
      "required": [
        "account",
        "organisationSlug",
        "secretKey"
      ],
      "additionalProperties": false,
      "description": "A configuration schema for Qonto banking integration",
      "title": "Qonto"
    },
    "GoogleIntegrationSchema": {
      "type": "object",
      "properties": {
        "mail": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MailGoogleIntegrationSchema"
          }
        }
      },
      "additionalProperties": false,
      "description": "A configuration schema for Google integration",
      "title": "Google"
    },
    "MailGoogleIntegrationSchema": {
      "type": "object",
      "properties": {
        "account": {
          "type": "string",
          "description": "The account identifier for the Google Mail integration",
          "title": "Account"
        },
        "user": {
          "type": "string",
          "description": "The user email address for Gmail authentication",
          "title": "User"
        },
        "password": {
          "type": "string",
          "description": "The password or app password for Gmail authentication",
          "title": "Password"
        },
        "baseUrl": {
          "type": "string",
          "description": "The base URL for Gmail authentication",
          "title": "Base URL"
        }
      },
      "required": [
        "account",
        "user",
        "password"
      ],
      "additionalProperties": false,
      "description": "A configuration schema for Gmail integration",
      "title": "Mail"
    },
    "GoCardlessIntegrationSchema": {
      "type": "object",
      "properties": {
        "account": {
          "type": "string",
          "description": "The account identifier for the GoCardless integration",
          "title": "Account"
        },
        "baseUrl": {
          "type": "string",
          "description": "The base URL for the GoCardless API",
          "title": "Base URL"
        },
        "accessToken": {
          "type": "string",
          "description": "The access token for authenticating with GoCardless",
          "title": "Access Token"
        }
      },
      "required": [
        "account",
        "accessToken"
      ],
      "additionalProperties": false,
      "description": "A configuration schema for GoCardless payment integration",
      "title": "GoCardless"
    },
    "PhantombusterIntegrationSchema": {
      "type": "object",
      "properties": {
        "account": {
          "type": "string",
          "description": "The Phantombuster account identifier",
          "title": "Account"
        },
        "apiKey": {
          "type": "string",
          "description": "The Phantombuster API key for authentication",
          "title": "API Key"
        },
        "baseUrl": {
          "type": "string",
          "description": "The base URL for Phantombuster API",
          "title": "Base URL"
        }
      },
      "required": [
        "account",
        "apiKey"
      ],
      "additionalProperties": false,
      "description": "A configuration schema for Phantombuster automation integration",
      "title": "Phantombuster"
    },
    "CalendlyIntegrationSchema": {
      "type": "object",
      "properties": {
        "account": {
          "type": "string",
          "description": "The account identifier for Calendly",
          "title": "Account"
        },
        "baseUrl": {
          "type": "string",
          "description": "The base URL for Calendly API",
          "title": "Base URL"
        },
        "accessToken": {
          "type": "string",
          "description": "The access token for Calendly API authentication",
          "title": "Access Token"
        },
        "clientId": {
          "type": "string",
          "description": "The client ID for Calendly API authentication",
          "title": "Client ID"
        },
        "clientSecret": {
          "type": "string",
          "description": "The client secret for Calendly API authentication",
          "title": "Client Secret"
        },
        "authBaseUrl": {
          "type": "string",
          "description": "The base URL for Calendly API authentication",
          "title": "Base URL"
        }
      },
      "required": [
        "account",
        "clientId",
        "clientSecret"
      ],
      "additionalProperties": false,
      "description": "A configuration schema for Calendly scheduling integration",
      "title": "Calendly"
    },
    "YouCanBookMeIntegrationSchema": {
      "type": "object",
      "properties": {
        "account": {
          "type": "string",
          "description": "The account identifier for YouCanBookMe",
          "title": "Account"
        },
        "username": {
          "type": "string",
          "description": "The username for YouCanBookMe",
          "title": "Username"
        },
        "password": {
          "type": "string",
          "description": "The password for YouCanBookMe",
          "title": "Password"
        },
        "baseUrl": {
          "type": "string",
          "description": "The base URL for YouCanBookMe API",
          "title": "Base URL"
        }
      },
      "required": [
        "account",
        "username",
        "password"
      ],
      "additionalProperties": false,
      "description": "A configuration schema for YouCanBookMe scheduling integration",
      "title": "YouCanBookMe"
    },
    "JotformIntegrationSchema": {
      "type": "object",
      "properties": {
        "account": {
          "type": "string",
          "description": "The account name for the Jotform integration",
          "title": "Account"
        },
        "baseUrl": {
          "type": "string",
          "description": "The base URL for the Jotform API",
          "title": "Base URL"
        },
        "apiKey": {
          "type": "string",
          "description": "The API key for authenticating with Jotform",
          "title": "API Key"
        }
      },
      "required": [
        "account",
        "apiKey"
      ],
      "additionalProperties": false,
      "description": "A configuration schema for Jotform integration",
      "title": "Jotform"
    },
    "ServiceSchema": {
      "type": "object",
      "properties": {
        "server": {
          "$ref": "#/definitions/ServerServiceSchema",
          "description": "Configuration for the server service.",
          "title": "Server"
        },
        "database": {
          "$ref": "#/definitions/DatabaseServiceSchema",
          "description": "Configuration for the database service.",
          "title": "Database"
        },
        "monitors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonitorServiceSchema"
          },
          "description": "Configurations for monitoring services.",
          "title": "Monitors"
        },
        "loggers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LoggerServiceSchema"
          },
          "description": "Configurations for logging services.",
          "title": "Loggers"
        },
        "tunnel": {
          "$ref": "#/definitions/TunnelServiceSchema",
          "description": "Configuration for the tunnel service.",
          "title": "Tunnel"
        },
        "theme": {
          "$ref": "#/definitions/ThemeServiceSchema",
          "description": "Configuration for the theme service.",
          "title": "Theme"
        }
      },
      "additionalProperties": false,
      "description": "Defines configurations for various services",
      "title": "Services"
    },
    "ServerServiceSchema": {
      "type": "object",
      "properties": {
        "apiKeys": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of API keys for authentication",
          "title": "API Keys"
        },
        "port": {
          "type": [
            "string",
            "number"
          ],
          "description": "The port number the server listens on",
          "title": "Port"
        },
        "idleTimeout": {
          "type": [
            "string",
            "number"
          ],
          "description": "The time in milliseconds before an idle connection is closed",
          "title": "Idle Timeout"
        },
        "baseUrl": {
          "type": "string",
          "description": "The base URL of the server",
          "title": "Base URL"
        },
        "sslCert": {
          "type": "string",
          "description": "The SSL certificate file path",
          "title": "SSL Certificate"
        },
        "sslKey": {
          "type": "string",
          "description": "The SSL key file path",
          "title": "SSL Key"
        },
        "monitors": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Sentry",
              "Console"
            ]
          },
          "description": "The monitor drivers to use",
          "title": "Monitor Drivers"
        }
      },
      "additionalProperties": false,
      "description": "Configuration for the server service, excluding app metadata",
      "title": "Server"
    },
    "DatabaseServiceSchema": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "PostgreSQL",
            "SQLite"
          ],
          "title": "Type",
          "description": "The type of database to use."
        },
        "url": {
          "type": "string",
          "title": "URL",
          "description": "The URL of the database."
        }
      },
      "required": [
        "type",
        "url"
      ],
      "additionalProperties": false,
      "description": "Configuration for the database service",
      "title": "Database",
      "default": {
        "type": "SQLite",
        "url": ":memory:"
      }
    },
    "MonitorServiceSchema": {
      "anyOf": [
        {
          "$ref": "#/definitions/SentryMonitorServiceSchema"
        },
        {
          "$ref": "#/definitions/ConsoleMonitorServiceSchema"
        }
      ],
      "description": "Configuration for monitoring services, supporting both Sentry and Console monitoring",
      "title": "Monitor"
    },
    "SentryMonitorServiceSchema": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "Sentry",
          "description": "The type of monitor configuration",
          "title": "Type"
        },
        "dsn": {
          "type": "string",
          "description": "The Data Source Name (DSN) for Sentry",
          "title": "DSN"
        },
        "environment": {
          "type": "string",
          "description": "The environment name for Sentry",
          "title": "Environment"
        }
      },
      "required": [
        "type",
        "dsn",
        "environment"
      ],
      "additionalProperties": false,
      "description": "Configuration for Sentry monitoring services",
      "title": "Sentry"
    },
    "ConsoleMonitorServiceSchema": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "Console",
          "description": "The type of monitor configuration",
          "title": "Type"
        }
      },
      "required": [
        "type"
      ],
      "additionalProperties": false,
      "description": "Configuration for console monitoring services",
      "title": "Console"
    },
    "LoggerServiceSchema": {
      "anyOf": [
        {
          "$ref": "#/definitions/ConsoleLoggerServiceSchema"
        },
        {
          "$ref": "#/definitions/FileLoggerServiceSchema"
        }
      ],
      "description": "Configuration for logging services",
      "title": "Logger",
      "default": {
        "type": "Console",
        "level": "info"
      }
    },
    "ConsoleLoggerServiceSchema": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "Console",
          "description": "The type of logger configuration",
          "title": "Type"
        },
        "level": {
          "type": "string",
          "description": "The minimum log level to output messages",
          "title": "Level"
        },
        "silent": {
          "type": "boolean",
          "description": "Whether to suppress all log output",
          "title": "Silent"
        }
      },
      "required": [
        "type"
      ],
      "additionalProperties": false,
      "description": "Configuration for console logging services",
      "title": "Console"
    },
    "FileLoggerServiceSchema": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "File",
          "description": "The type of logger configuration",
          "title": "Type"
        },
        "level": {
          "type": "string",
          "description": "The minimum log level to output messages",
          "title": "Level"
        },
        "silent": {
          "type": "boolean",
          "description": "Whether to suppress all log output",
          "title": "Silent"
        },
        "filename": {
          "type": "string",
          "description": "The path to the log file",
          "title": "Filename"
        }
      },
      "required": [
        "type",
        "filename"
      ],
      "additionalProperties": false,
      "description": "Configuration for file-based logging services",
      "title": "File"
    },
    "TunnelServiceSchema": {
      "type": "object",
      "properties": {
        "integration": {
          "type": "string",
          "const": "Ngrok",
          "title": "Type",
          "description": "The type of tunnel integration to use"
        },
        "authToken": {
          "type": "string",
          "title": "Authentication token",
          "description": "The authentication token for the tunnel service"
        },
        "account": {
          "type": "string",
          "title": "Account name",
          "description": "The account name for the tunnel service"
        }
      },
      "required": [
        "integration",
        "authToken",
        "account"
      ],
      "additionalProperties": false,
      "title": "Tunnel",
      "description": "Configuration for tunnel service"
    },
    "ThemeServiceSchema": {
      "anyOf": [
        {
          "$ref": "#/definitions/TailwindcssThemeServiceSchema"
        },
        {
          "$ref": "#/definitions/NoneThemeServiceSchema"
        }
      ],
      "description": "Configuration for the theme service",
      "title": "Theme",
      "default": {
        "type": "tailwindcss"
      }
    },
    "TailwindcssThemeServiceSchema": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "tailwindcss",
          "title": "Type",
          "description": "The type of theme to use, must be 'tailwindcss'"
        },
        "base": {
          "type": "string",
          "title": "Base",
          "description": "The base directory path for theme files, relative to the project root"
        }
      },
      "required": [
        "type"
      ],
      "additionalProperties": false,
      "title": "TailwindCSS",
      "description": "Configuration schema for the theme service when using TailwindCSS"
    },
    "NoneThemeServiceSchema": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "none",
          "title": "Type",
          "description": "The type of theme to use, must be 'none'"
        }
      },
      "required": [
        "type"
      ],
      "additionalProperties": false,
      "title": "None",
      "description": "Configuration schema for the theme service when using none"
    }
  }
}