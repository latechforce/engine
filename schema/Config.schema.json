{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$ref": "#/definitions/ConfigSchema",
  "definitions": {
    "ConfigSchema": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the engine",
          "title": "Name"
        },
        "version": {
          "type": "string",
          "description": "The version of the config",
          "title": "Config version"
        },
        "engine": {
          "type": "string",
          "description": "The version of the engine",
          "title": "Engine version"
        },
        "description": {
          "type": "string",
          "description": "The description of the engine",
          "title": "Description"
        },
        "forms": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FormSchema"
          },
          "description": "The forms of the engine",
          "title": "Forms"
        },
        "automations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AutomationSchema"
          },
          "description": "The automations of the engine",
          "title": "Automations"
        },
        "tables": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TableSchema"
          },
          "description": "The tables of the engine",
          "title": "Tables"
        },
        "buckets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BucketSchema"
          },
          "description": "The buckets of the engine",
          "title": "Buckets"
        },
        "integrations": {
          "$ref": "#/definitions/IntegrationSchema",
          "description": "The integrations of the engine",
          "title": "Integrations"
        },
        "server": {
          "type": "object",
          "properties": {
            "apiKeys": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "port": {
              "type": ["string", "number"]
            },
            "idleTimeout": {
              "type": ["string", "number"]
            },
            "baseUrl": {
              "type": "string"
            },
            "sslCert": {
              "type": "string"
            },
            "sslKey": {
              "type": "string"
            },
            "env": {
              "type": "string"
            },
            "monitors": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["Sentry", "Console"]
              }
            }
          },
          "additionalProperties": false,
          "description": "The server of the engine",
          "title": "Server"
        },
        "database": {
          "type": "object",
          "properties": {
            "driver": {
              "type": "string",
              "enum": ["PostgreSQL", "SQLite"]
            },
            "url": {
              "type": "string"
            }
          },
          "required": ["driver", "url"],
          "additionalProperties": false,
          "description": "The database of the engine",
          "title": "Database"
        },
        "monitors": {
          "type": "array",
          "items": {
            "anyOf": [
              {
                "type": "object",
                "properties": {
                  "driver": {
                    "type": "string",
                    "const": "Sentry"
                  },
                  "dsn": {
                    "type": "string"
                  },
                  "environment": {
                    "type": "string"
                  }
                },
                "required": ["driver", "dsn", "environment"],
                "additionalProperties": false
              },
              {
                "type": "object",
                "properties": {
                  "driver": {
                    "type": "string",
                    "const": "Console"
                  }
                },
                "required": ["driver"],
                "additionalProperties": false
              }
            ]
          },
          "description": "The monitors of the engine",
          "title": "Monitors"
        },
        "loggers": {
          "type": "array",
          "items": {
            "anyOf": [
              {
                "type": "object",
                "properties": {
                  "level": {
                    "type": "string"
                  },
                  "silent": {
                    "type": "boolean"
                  },
                  "driver": {
                    "type": "string",
                    "const": "Console"
                  }
                },
                "required": ["driver"],
                "additionalProperties": false
              },
              {
                "type": "object",
                "properties": {
                  "level": {
                    "type": "string"
                  },
                  "silent": {
                    "type": "boolean"
                  },
                  "driver": {
                    "type": "string",
                    "const": "File"
                  },
                  "filename": {
                    "type": "string"
                  }
                },
                "required": ["driver", "filename"],
                "additionalProperties": false
              },
              {
                "type": "object",
                "properties": {
                  "level": {
                    "type": "string"
                  },
                  "silent": {
                    "type": "boolean"
                  },
                  "driver": {
                    "type": "string",
                    "const": "ElasticSearch"
                  },
                  "url": {
                    "type": "string"
                  },
                  "index": {
                    "type": "string"
                  }
                },
                "required": ["driver", "url", "index"],
                "additionalProperties": false
              }
            ]
          },
          "description": "The loggers of the engine",
          "title": "Loggers"
        },
        "tunnel": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "baseUrl": {
              "type": "string"
            },
            "authToken": {
              "type": "string"
            },
            "integration": {
              "type": "string",
              "const": "Ngrok"
            }
          },
          "required": ["authToken", "integration", "name"],
          "additionalProperties": false,
          "description": "The tunnel of the engine",
          "title": "Tunnel"
        },
        "theme": {
          "anyOf": [
            {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "const": "none"
                }
              },
              "required": ["type"],
              "additionalProperties": false
            },
            {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "const": "tailwindcss"
                },
                "base": {
                  "type": "string"
                }
              },
              "required": ["type"],
              "additionalProperties": false
            }
          ],
          "description": "The themes of the engine",
          "title": "Themes"
        }
      },
      "required": ["name", "version", "engine"],
      "additionalProperties": false,
      "description": "This is the configuration of the engine.",
      "title": "Config"
    },
    "FormSchema": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "inputs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InputFormSchema"
          }
        },
        "name": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "table": {
          "type": "string"
        },
        "submitLabel": {
          "type": "string"
        },
        "successMessage": {
          "type": "string"
        }
      },
      "required": ["inputs", "name", "path", "table"],
      "description": "Type alias for form configuration",
      "title": "Form"
    },
    "InputFormSchema": {
      "type": "object",
      "properties": {
        "field": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "placeholder": {
          "type": "string"
        },
        "required": {
          "type": "boolean"
        },
        "minLength": {
          "type": "number"
        },
        "maxLength": {
          "type": "number"
        }
      },
      "required": ["field"],
      "additionalProperties": false,
      "description": "Type alias for input configuration",
      "title": "Input"
    },
    "AutomationSchema": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "summary": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "trigger": {
          "$ref": "#/definitions/TriggerAutomationSchema"
        },
        "actions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActionAutomationSchema"
          }
        }
      },
      "required": ["actions", "name", "trigger"],
      "additionalProperties": false,
      "description": "Defines an automation workflow with triggers and actions",
      "title": "Automation"
    },
    "TriggerAutomationSchema": {
      "anyOf": [
        {
          "$ref": "#/definitions/ServiceTriggerAutomationSchema"
        },
        {
          "$ref": "#/definitions/IntegrationTriggerAutomationSchema"
        }
      ],
      "description": "Union type of all possible triggers that can start automations",
      "examples": [
        {
          "service": "Http",
          "trigger": "ApiCalled",
          "path": "/run-automation"
        }
      ],
      "title": "Trigger"
    },
    "ServiceTriggerAutomationSchema": {
      "anyOf": [
        {
          "$ref": "#/definitions/DatabaseServiceTriggerAutomationSchema"
        },
        {
          "$ref": "#/definitions/HttpServiceTriggerAutomationSchema"
        },
        {
          "$ref": "#/definitions/ScheduleServiceTriggerAutomationSchema"
        }
      ],
      "description": "The Service trigger.",
      "title": "Service"
    },
    "DatabaseServiceTriggerAutomationSchema": {
      "$ref": "#/definitions/RecordCreatedDatabaseServiceTriggerAutomationSchema",
      "description": "The Database service trigger.",
      "title": "Database"
    },
    "RecordCreatedDatabaseServiceTriggerAutomationSchema": {
      "type": "object",
      "properties": {
        "table": {
          "type": "string"
        },
        "service": {
          "type": "string",
          "const": "Database"
        },
        "event": {
          "type": "string",
          "const": "RecordCreated"
        }
      },
      "required": ["event", "service", "table"],
      "additionalProperties": false,
      "description": "A trigger that fires when a record is created in a database",
      "title": "Record Created"
    },
    "HttpServiceTriggerAutomationSchema": {
      "anyOf": [
        {
          "$ref": "#/definitions/ApiCalledHttpServiceTriggerAutomationSchema"
        },
        {
          "$ref": "#/definitions/WebhookCalledHttpServiceTriggerAutomationSchema"
        }
      ],
      "description": "The Http service trigger.",
      "title": "Http"
    },
    "ApiCalledHttpServiceTriggerAutomationSchema": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string"
        },
        "input": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "enum": ["string", "number", "boolean", "array", "object"]
            },
            "properties": {
              "type": "object",
              "additionalProperties": {}
            },
            "enum": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "items": {},
            "required": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "additionalProperties": {
              "type": "boolean"
            },
            "oneOf": {
              "type": "array",
              "items": {}
            }
          },
          "additionalProperties": false
        },
        "output": {
          "type": "object",
          "additionalProperties": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "object",
                "properties": {
                  "number": {
                    "type": "string"
                  }
                },
                "required": ["number"],
                "additionalProperties": false
              },
              {
                "type": "object",
                "properties": {
                  "boolean": {
                    "type": "string"
                  }
                },
                "required": ["boolean"],
                "additionalProperties": false
              },
              {
                "type": "object",
                "properties": {
                  "json": {
                    "type": "string"
                  }
                },
                "required": ["json"],
                "additionalProperties": false
              },
              {},
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              {
                "type": "number"
              },
              {
                "type": "boolean"
              },
              {
                "not": {}
              }
            ]
          }
        },
        "auth": {
          "type": "string",
          "const": "ApiKey"
        },
        "service": {
          "type": "string",
          "const": "Http"
        },
        "event": {
          "type": "string",
          "const": "ApiCalled"
        }
      },
      "required": ["event", "path", "service"],
      "additionalProperties": false,
      "description": "A trigger that fires when an API is called",
      "title": "Api Called"
    },
    "WebhookCalledHttpServiceTriggerAutomationSchema": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string"
        },
        "auth": {},
        "service": {
          "type": "string",
          "const": "Http"
        },
        "event": {
          "type": "string",
          "const": "WebhookCalled"
        }
      },
      "required": ["event", "path", "service"],
      "additionalProperties": false,
      "description": "A trigger that fires when a webhook is called",
      "title": "Webhook Called"
    },
    "ScheduleServiceTriggerAutomationSchema": {
      "$ref": "#/definitions/CronTimeTickedScheduleServiceTriggerAutomationSchema",
      "description": "The Schedule service trigger.",
      "title": "Schedule"
    },
    "CronTimeTickedScheduleServiceTriggerAutomationSchema": {
      "type": "object",
      "properties": {
        "cronTime": {
          "type": "string"
        },
        "service": {
          "type": "string",
          "const": "Schedule"
        },
        "event": {
          "type": "string",
          "const": "CronTimeTicked"
        }
      },
      "required": ["cronTime", "event", "service"],
      "additionalProperties": false,
      "description": "A trigger that fires when a cron time is ticked",
      "title": "Cron Time Ticked"
    },
    "IntegrationTriggerAutomationSchema": {
      "anyOf": [
        {
          "$ref": "#/definitions/CalendlyIntegrationTriggerAutomationSchema"
        },
        {
          "$ref": "#/definitions/NotionIntegrationTriggerAutomationSchema"
        }
      ],
      "description": "The Integration trigger.",
      "title": "Integration"
    },
    "CalendlyIntegrationTriggerAutomationSchema": {
      "$ref": "#/definitions/InviteeCreatedCalendlyIntegrationTriggerAutomationSchema",
      "description": "The Calendly integration trigger.",
      "title": "Calendly"
    },
    "InviteeCreatedCalendlyIntegrationTriggerAutomationSchema": {
      "type": "object",
      "properties": {
        "account": {
          "type": "string"
        },
        "integration": {
          "type": "string",
          "const": "Calendly"
        },
        "event": {
          "type": "string",
          "const": "InviteeCreated"
        }
      },
      "required": ["account", "event", "integration"],
      "additionalProperties": false,
      "description": "A trigger that fires when an invitee is created in Calendly",
      "title": "Invitee Created"
    },
    "NotionIntegrationTriggerAutomationSchema": {
      "$ref": "#/definitions/TablePageCreatedNotionIntegrationTriggerAutomationSchema",
      "description": "The Notion integration trigger.",
      "title": "Notion"
    },
    "TablePageCreatedNotionIntegrationTriggerAutomationSchema": {
      "type": "object",
      "properties": {
        "table": {
          "type": "string"
        },
        "account": {
          "type": "string"
        },
        "integration": {
          "type": "string",
          "const": "Notion"
        },
        "event": {
          "type": "string",
          "const": "TablePageCreated"
        }
      },
      "required": ["account", "event", "integration", "table"],
      "additionalProperties": false,
      "description": "A trigger that fires when a table page is created in Notion",
      "title": "Table Page Created"
    },
    "ActionAutomationSchema": {
      "anyOf": [
        {
          "$ref": "#/definitions/IntegrationActionAutomationSchema"
        },
        {
          "$ref": "#/definitions/ServiceActionAutomationSchema"
        }
      ],
      "description": "Union type of all possible actions that can be performed in automations",
      "examples": [
        {
          "service": "Database",
          "action": "ReadRecord",
          "table": "users",
          "id": "user_123"
        }
      ],
      "title": "Action"
    },
    "IntegrationActionAutomationSchema": {
      "anyOf": [
        {
          "$ref": "#/definitions/PappersIntegrationActionAutomationSchema"
        },
        {
          "$ref": "#/definitions/QontoIntegrationActionAutomationSchema"
        },
        {
          "$ref": "#/definitions/NotionIntegrationActionAutomationSchema"
        },
        {
          "$ref": "#/definitions/GoogleIntegrationActionAutomationSchema"
        },
        {
          "$ref": "#/definitions/GoCardlessIntegrationActionAutomationSchema"
        }
      ],
      "description": "Union type of all possible integration actions that can be performed in automations",
      "examples": [
        {
          "service": "Integration",
          "action": "GetCompany",
          "companyId": "123"
        }
      ],
      "title": "Integration"
    },
    "PappersIntegrationActionAutomationSchema": {
      "$ref": "#/definitions/GetCompanyPappersIntegrationActionAutomationSchema",
      "description": "The Pappers integration action.",
      "title": "Pappers"
    },
    "GetCompanyPappersIntegrationActionAutomationSchema": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "account": {
          "type": "string"
        },
        "siret": {
          "type": "string"
        },
        "integration": {
          "type": "string",
          "const": "Pappers"
        },
        "action": {
          "type": "string",
          "const": "GetCompany"
        }
      },
      "required": ["account", "action", "integration", "name", "siret"],
      "additionalProperties": false,
      "description": "Retrieves company information using Pappers integration",
      "examples": [
        {
          "integration": "Pappers",
          "action": "GetCompany",
          "siren": "123456789"
        }
      ],
      "title": "Get Company"
    },
    "QontoIntegrationActionAutomationSchema": {
      "anyOf": [
        {
          "$ref": "#/definitions/CreateClientQontoIntegrationActionAutomationSchema"
        },
        {
          "$ref": "#/definitions/RetrieveAttachmentQontoIntegrationActionAutomationSchema"
        }
      ],
      "description": "The Qonto integration action.",
      "title": "Qonto"
    },
    "CreateClientQontoIntegrationActionAutomationSchema": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "account": {
          "type": "string"
        },
        "client": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "currency": {
              "type": "string"
            },
            "email": {
              "type": "string"
            },
            "vat_number": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "first_name": {
              "type": "string"
            },
            "last_name": {
              "type": "string"
            },
            "type": {
              "type": "string"
            },
            "tax_identification_number": {
              "type": "string"
            },
            "address": {
              "type": "string"
            },
            "city": {
              "type": "string"
            },
            "zip_code": {
              "type": "string"
            },
            "country_code": {
              "type": "string"
            },
            "billing_address": {
              "type": "object",
              "properties": {
                "street_address": {
                  "type": "string"
                },
                "city": {
                  "type": "string"
                },
                "zip_code": {
                  "type": "string"
                },
                "province_code": {
                  "type": "string"
                },
                "country_code": {
                  "type": "string"
                }
              },
              "required": ["street_address", "city", "zip_code", "province_code", "country_code"],
              "additionalProperties": false
            },
            "delivery_address": {
              "type": "object",
              "properties": {
                "street_address": {
                  "type": "string"
                },
                "city": {
                  "type": "string"
                },
                "zip_code": {
                  "type": "string"
                },
                "province_code": {
                  "type": "string"
                },
                "country_code": {
                  "type": "string"
                }
              },
              "required": ["street_address", "city", "zip_code", "province_code", "country_code"],
              "additionalProperties": false
            },
            "locale": {
              "type": "string"
            }
          },
          "required": ["address", "city", "country_code", "currency", "locale", "type", "zip_code"]
        },
        "integration": {
          "type": "string",
          "const": "Qonto"
        },
        "action": {
          "type": "string",
          "const": "CreateClient"
        }
      },
      "required": ["account", "action", "client", "integration", "name"],
      "additionalProperties": false,
      "description": "Creates a new client in Qonto with the specified details",
      "examples": [
        {
          "integration": "Qonto",
          "action": "CreateClient",
          "client": {
            "name": "{{trigger.payload.companyName}}",
            "email": "{{trigger.payload.email}}",
            "phone": "{{trigger.payload.phone}}",
            "address": {
              "street": "{{trigger.payload.street}}",
              "city": "{{trigger.payload.city}}",
              "postalCode": "{{trigger.payload.postalCode}}",
              "country": "{{trigger.payload.country}}"
            }
          }
        }
      ],
      "title": "Create Client"
    },
    "RetrieveAttachmentQontoIntegrationActionAutomationSchema": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "account": {
          "type": "string"
        },
        "attachmentId": {
          "type": "string"
        },
        "integration": {
          "type": "string",
          "const": "Qonto"
        },
        "action": {
          "type": "string",
          "const": "RetrieveAttachment"
        }
      },
      "required": ["account", "action", "attachmentId", "integration", "name"],
      "additionalProperties": false,
      "description": "Retrieves an attachment using Qonto integration",
      "examples": [
        {
          "integration": "Qonto",
          "action": "RetrieveAttachment",
          "attachmentId": "att_123456789"
        }
      ],
      "title": "Retrieve Attachment"
    },
    "NotionIntegrationActionAutomationSchema": {
      "$ref": "#/definitions/UpdatePageNotionIntegrationActionAutomationSchema",
      "description": "The Notion integration action.",
      "title": "Notion"
    },
    "UpdatePageNotionIntegrationActionAutomationSchema": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "account": {
          "type": "string"
        },
        "table": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "page": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "integration": {
          "type": "string",
          "const": "Notion"
        },
        "action": {
          "type": "string",
          "const": "UpdatePage"
        }
      },
      "required": ["account", "action", "id", "integration", "name", "page", "table"],
      "additionalProperties": false,
      "description": "Updates a page in Notion with the specified properties",
      "examples": [
        {
          "integration": "Notion",
          "action": "UpdatePage",
          "pageId": "{{trigger.payload.pageId}}",
          "properties": {
            "title": "{{trigger.payload.title}}",
            "status": "{{trigger.payload.status}}"
          }
        }
      ],
      "title": "Update Page"
    },
    "GoogleIntegrationActionAutomationSchema": {
      "$ref": "#/definitions/MailGoogleIntegrationActionAutomationSchema",
      "description": "The Google integration action.",
      "title": "Google"
    },
    "MailGoogleIntegrationActionAutomationSchema": {
      "$ref": "#/definitions/SendEmailMailGoogleIntegrationActionAutomationSchema",
      "description": "The Google Mail integration action.",
      "title": "Mail"
    },
    "SendEmailMailGoogleIntegrationActionAutomationSchema": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "account": {
          "type": "string"
        },
        "email": {
          "type": "object",
          "properties": {
            "from": {
              "type": "string"
            },
            "to": {
              "type": "string"
            },
            "cc": {
              "type": "string"
            },
            "bcc": {
              "type": "string"
            },
            "subject": {
              "type": "string"
            },
            "text": {
              "type": "string"
            },
            "html": {
              "type": "string"
            }
          },
          "required": ["to"],
          "additionalProperties": false
        },
        "integration": {
          "type": "string",
          "const": "GoogleMail"
        },
        "action": {
          "type": "string",
          "const": "SendEmail"
        }
      },
      "required": ["account", "action", "email", "integration", "name"],
      "additionalProperties": false,
      "description": "Sends an email using Google Mail integration",
      "examples": [
        {
          "integration": "GoogleMail",
          "action": "SendEmail",
          "email": {
            "to": "recipient@example.com",
            "subject": "Test Email",
            "text": "This is a test email"
          }
        }
      ],
      "title": "Send Email"
    },
    "GoCardlessIntegrationActionAutomationSchema": {
      "anyOf": [
        {
          "$ref": "#/definitions/CreatePaymentGoCardlessIntegrationActionAutomationSchema"
        },
        {
          "$ref": "#/definitions/ListPaymentsGoCardlessIntegrationActionAutomationSchema"
        }
      ],
      "description": "The GoCardless integration action.",
      "title": "GoCardless"
    },
    "CreatePaymentGoCardlessIntegrationActionAutomationSchema": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "account": {
          "type": "string"
        },
        "payment": {
          "type": "object",
          "properties": {
            "amount": {
              "type": "number"
            },
            "currency": {
              "type": "string"
            },
            "charge_date": {
              "type": "string"
            },
            "reference": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "metadata": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "retry_if_possible": {
              "type": "boolean"
            },
            "mandate": {
              "type": "string"
            }
          },
          "required": ["amount", "currency", "mandate"],
          "additionalProperties": false
        },
        "integration": {
          "type": "string",
          "const": "GoCardless"
        },
        "action": {
          "type": "string",
          "const": "CreatePayment"
        }
      },
      "required": ["account", "action", "integration", "name", "payment"],
      "additionalProperties": false,
      "description": "Creates a new payment in GoCardless with the specified details",
      "examples": [
        {
          "integration": "GoCardless",
          "action": "CreatePayment",
          "payment": {
            "amount": 1000,
            "currency": "EUR",
            "description": "Monthly subscription",
            "mandate": "{{trigger.payload.mandateId}}",
            "metadata": {
              "orderId": "{{trigger.payload.orderId}}",
              "customerId": "{{trigger.payload.customerId}}"
            }
          }
        }
      ],
      "title": "Create Payment"
    },
    "ListPaymentsGoCardlessIntegrationActionAutomationSchema": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "account": {
          "type": "string"
        },
        "params": {
          "type": "object",
          "properties": {
            "limit": {
              "type": "number"
            },
            "after": {
              "type": "string"
            },
            "before": {
              "type": "string"
            },
            "status": {
              "type": "string"
            },
            "mandate": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "integration": {
          "type": "string",
          "const": "GoCardless"
        },
        "action": {
          "type": "string",
          "const": "ListPayments"
        }
      },
      "required": ["account", "action", "integration", "name", "params"],
      "additionalProperties": false,
      "description": "Lists payments using GoCardless integration with optional filters",
      "examples": [
        {
          "integration": "GoCardless",
          "action": "ListPayments",
          "filters": {
            "status": "paid",
            "limit": 10
          }
        }
      ],
      "title": "List Payments"
    },
    "ServiceActionAutomationSchema": {
      "anyOf": [
        {
          "$ref": "#/definitions/CodeServiceActionAutomationSchema"
        },
        {
          "$ref": "#/definitions/DatabaseServiceActionAutomationSchema"
        }
      ],
      "description": "Union type of all possible service actions that can be performed in automations",
      "examples": [
        {
          "service": "Service",
          "action": "RunJavascript",
          "code": "console.log(\"Hello, world!\");"
        }
      ],
      "title": "Service"
    },
    "CodeServiceActionAutomationSchema": {
      "anyOf": [
        {
          "$ref": "#/definitions/RunJavascriptCodeServiceActionAutomationSchema"
        },
        {
          "$ref": "#/definitions/RunTypescriptCodeServiceActionAutomationSchema"
        }
      ],
      "description": "The Code action.",
      "title": "Code"
    },
    "RunJavascriptCodeServiceActionAutomationSchema": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "input": {},
        "env": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "service": {
          "type": "string",
          "const": "Code"
        },
        "action": {
          "type": "string",
          "const": "RunJavascript"
        }
      },
      "required": ["action", "code", "name", "service"],
      "additionalProperties": false,
      "description": "Executes JavaScript code with the specified input",
      "examples": [
        {
          "service": "Code",
          "action": "RunJavascript",
          "code": "return { result: input.value * 2 }",
          "input": {
            "value": 5
          }
        }
      ],
      "title": "Run JavaScript"
    },
    "RunTypescriptCodeServiceActionAutomationSchema": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "input": {},
        "env": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "service": {
          "type": "string",
          "const": "Code"
        },
        "action": {
          "type": "string",
          "const": "RunTypescript"
        }
      },
      "required": ["action", "code", "name", "service"],
      "additionalProperties": false,
      "description": "Executes TypeScript code with the specified input",
      "examples": [
        {
          "service": "Code",
          "action": "RunTypescript",
          "code": "return { result: input.value * 2 }",
          "input": {
            "value": 5
          }
        }
      ],
      "title": "Run TypeScript"
    },
    "DatabaseServiceActionAutomationSchema": {
      "anyOf": [
        {
          "$ref": "#/definitions/ReadRecordDatabaseServiceActionAutomationSchema"
        },
        {
          "$ref": "#/definitions/CreateRecordDatabaseServiceActionAutomationSchema"
        }
      ],
      "description": "The Database service action.",
      "title": "Database"
    },
    "ReadRecordDatabaseServiceActionAutomationSchema": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "table": {
          "type": "string"
        },
        "service": {
          "type": "string",
          "const": "Database"
        },
        "action": {
          "type": "string",
          "const": "ReadRecord"
        }
      },
      "required": ["action", "id", "name", "service", "table"],
      "additionalProperties": false,
      "description": "Reads a record from the specified database table",
      "examples": [
        {
          "service": "Database",
          "action": "ReadRecord",
          "table": "users",
          "id": "user_123"
        }
      ],
      "title": "Read Record"
    },
    "CreateRecordDatabaseServiceActionAutomationSchema": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "fields": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "table": {
          "type": "string"
        },
        "service": {
          "type": "string",
          "const": "Database"
        },
        "action": {
          "type": "string",
          "const": "CreateRecord"
        }
      },
      "required": ["action", "fields", "name", "service", "table"],
      "additionalProperties": false,
      "description": "Creates a new record in the specified database table with the given fields",
      "examples": [
        {
          "service": "Database",
          "action": "CreateRecord",
          "table": "users",
          "fields": {
            "name": "{{trigger.payload.name}}",
            "email": "{{trigger.payload.email}}",
            "role": "customer",
            "createdAt": "{{now}}"
          }
        }
      ],
      "title": "Create Record"
    },
    "TableSchema": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The unique identifier for the table",
          "examples": ["users"]
        },
        "schema": {
          "type": "string",
          "description": "The database schema where the table is located",
          "examples": ["public"]
        },
        "fields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FieldTableSchema"
          },
          "description": "Array of field definitions for the table",
          "examples": [
            [
              {
                "name": "id",
                "type": "string",
                "required": true
              }
            ]
          ]
        }
      },
      "required": ["name", "fields"],
      "additionalProperties": false,
      "description": "Defines the structure of a database table",
      "title": "Table"
    },
    "FieldTableSchema": {
      "anyOf": [
        {
          "$ref": "#/definitions/DateTimeFieldTableSchema"
        },
        {
          "$ref": "#/definitions/EmailFieldTableSchema"
        },
        {
          "$ref": "#/definitions/FormulaFieldTableSchema"
        },
        {
          "$ref": "#/definitions/LongTextFieldTableSchema"
        },
        {
          "$ref": "#/definitions/MultipleLinkedRecordFieldTableSchema"
        },
        {
          "$ref": "#/definitions/NumberFieldTableSchema"
        },
        {
          "$ref": "#/definitions/RollupFieldTableSchema"
        },
        {
          "$ref": "#/definitions/SingleLineTextFieldTableSchema"
        },
        {
          "$ref": "#/definitions/SingleLinkedRecordFieldTableSchema"
        },
        {
          "$ref": "#/definitions/SingleSelectFieldTableSchema"
        },
        {
          "$ref": "#/definitions/MultipleSelectFieldTableSchema"
        },
        {
          "$ref": "#/definitions/CheckboxFieldTableSchema"
        },
        {
          "$ref": "#/definitions/MultipleAttachmentFieldTableSchema"
        },
        {
          "$ref": "#/definitions/UrlFieldTableSchema"
        },
        {
          "$ref": "#/definitions/SingleAttachmentFieldTableSchema"
        }
      ],
      "description": "Union type of all possible field types that can be used in forms and tables",
      "examples": [
        {
          "type": "SingleLineText",
          "name": "full_name",
          "required": true
        }
      ],
      "title": "Field"
    },
    "DateTimeFieldTableSchema": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "required": {
          "type": "boolean"
        },
        "onMigration": {
          "type": "object",
          "properties": {
            "replace": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "type": {
          "type": "string",
          "const": "DateTime"
        }
      },
      "required": ["name", "type"],
      "additionalProperties": false,
      "description": "Represents a date and time field in forms and tables",
      "examples": [
        {
          "type": "DateTime",
          "name": "appointmentTime",
          "required": true
        }
      ],
      "title": "DateTime"
    },
    "EmailFieldTableSchema": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "required": {
          "type": "boolean"
        },
        "onMigration": {
          "type": "object",
          "properties": {
            "replace": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "type": {
          "type": "string",
          "const": "Email"
        }
      },
      "required": ["name", "type"],
      "additionalProperties": false,
      "description": "Represents a field that stores an email address",
      "examples": [
        {
          "type": "Email",
          "name": "email",
          "required": true
        }
      ],
      "title": "Email"
    },
    "FormulaFieldTableSchema": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "required": {
          "type": "boolean"
        },
        "onMigration": {
          "type": "object",
          "properties": {
            "replace": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "type": {
          "type": "string",
          "const": "Formula"
        },
        "formula": {
          "type": "string"
        },
        "output": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "enum": ["Number", "LongText", "SingleLineText", "DateTime"]
            },
            "required": {
              "type": "boolean"
            },
            "onMigration": {
              "type": "object",
              "properties": {
                "replace": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "required": ["type"],
          "additionalProperties": false
        }
      },
      "required": ["formula", "name", "output", "type"],
      "additionalProperties": false,
      "description": "Represents a calculated field in forms and tables",
      "examples": [
        {
          "type": "Formula",
          "name": "totalPrice",
          "formula": "price * quantity"
        }
      ],
      "title": "Formula"
    },
    "LongTextFieldTableSchema": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "required": {
          "type": "boolean"
        },
        "onMigration": {
          "type": "object",
          "properties": {
            "replace": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "type": {
          "type": "string",
          "const": "LongText"
        }
      },
      "required": ["name", "type"],
      "additionalProperties": false,
      "description": "Represents a field that stores multiple lines of text",
      "examples": [
        {
          "type": "LongText",
          "name": "description",
          "required": true
        }
      ],
      "title": "Long text"
    },
    "MultipleLinkedRecordFieldTableSchema": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "required": {
          "type": "boolean"
        },
        "onMigration": {
          "type": "object",
          "properties": {
            "replace": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "type": {
          "type": "string",
          "const": "MultipleLinkedRecord"
        },
        "table": {
          "type": "string"
        }
      },
      "required": ["name", "table", "type"],
      "additionalProperties": false,
      "description": "Represents a field that can link to multiple records from another table",
      "examples": [
        {
          "type": "MultipleLinkedRecord",
          "name": "projects",
          "required": true,
          "table": "projects"
        }
      ],
      "title": "Multiple linked record"
    },
    "NumberFieldTableSchema": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "required": {
          "type": "boolean"
        },
        "onMigration": {
          "type": "object",
          "properties": {
            "replace": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "type": {
          "type": "string",
          "const": "Number"
        }
      },
      "required": ["name", "type"],
      "additionalProperties": false,
      "description": "Represents a field that stores numeric values",
      "examples": [
        {
          "type": "Number",
          "name": "age",
          "required": true
        }
      ],
      "title": "Number"
    },
    "RollupFieldTableSchema": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "multipleLinkedRecord": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "const": "Rollup"
        },
        "formula": {
          "type": "string"
        },
        "linkedRecordField": {
          "type": "string"
        },
        "output": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "enum": ["Number", "LongText", "SingleLineText", "DateTime"]
            },
            "required": {
              "type": "boolean"
            },
            "onMigration": {
              "type": "object",
              "properties": {
                "replace": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "required": ["type"],
          "additionalProperties": false
        },
        "name": {
          "type": "string"
        },
        "required": {
          "type": "boolean"
        },
        "onMigration": {
          "type": "object",
          "properties": {
            "replace": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "required": [
        "formula",
        "linkedRecordField",
        "multipleLinkedRecord",
        "name",
        "output",
        "type"
      ],
      "description": "Represents a field that aggregates data from linked records",
      "examples": [
        {
          "type": "Rollup",
          "name": "totalSales",
          "required": false,
          "multipleLinkedRecord": "orders",
          "linkedRecordField": "amount",
          "formula": "sum(amount)",
          "output": {
            "type": "Number",
            "name": "totalSales"
          }
        }
      ],
      "title": "Rollup"
    },
    "SingleLineTextFieldTableSchema": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "required": {
          "type": "boolean"
        },
        "onMigration": {
          "type": "object",
          "properties": {
            "replace": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "type": {
          "type": "string",
          "const": "SingleLineText"
        }
      },
      "required": ["name", "type"],
      "additionalProperties": false,
      "description": "Represents a field that stores a single line of text",
      "examples": [
        {
          "type": "SingleLineText",
          "name": "title",
          "required": true
        }
      ],
      "title": "Single line text"
    },
    "SingleLinkedRecordFieldTableSchema": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "required": {
          "type": "boolean"
        },
        "onMigration": {
          "type": "object",
          "properties": {
            "replace": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "type": {
          "type": "string",
          "const": "SingleLinkedRecord"
        },
        "table": {
          "type": "string"
        }
      },
      "required": ["name", "table", "type"],
      "additionalProperties": false,
      "description": "Represents a field that can link to a single record from another table",
      "examples": [
        {
          "type": "SingleLinkedRecord",
          "name": "manager",
          "required": true,
          "table": "users"
        }
      ],
      "title": "Single linked record"
    },
    "SingleSelectFieldTableSchema": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "required": {
          "type": "boolean"
        },
        "onMigration": {
          "type": "object",
          "properties": {
            "replace": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "type": {
          "type": "string",
          "const": "SingleSelect"
        },
        "options": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "required": ["name", "options", "type"],
      "additionalProperties": false,
      "description": "Represents a field that allows selecting one option from a predefined list",
      "examples": [
        {
          "type": "SingleSelect",
          "name": "status",
          "required": true,
          "options": ["Active", "Inactive", "Pending"]
        }
      ],
      "title": "Single select"
    },
    "MultipleSelectFieldTableSchema": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "required": {
          "type": "boolean"
        },
        "onMigration": {
          "type": "object",
          "properties": {
            "replace": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "type": {
          "type": "string",
          "const": "MultipleSelect"
        },
        "options": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "required": ["name", "options", "type"],
      "additionalProperties": false,
      "description": "Represents a field that allows selecting multiple options from a predefined list",
      "examples": [
        {
          "type": "MultipleSelect",
          "name": "interests",
          "required": true,
          "options": ["Sports", "Music", "Travel"]
        }
      ],
      "title": "Multiple select"
    },
    "CheckboxFieldTableSchema": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "required": {
          "type": "boolean"
        },
        "onMigration": {
          "type": "object",
          "properties": {
            "replace": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "type": {
          "type": "string",
          "const": "Checkbox"
        }
      },
      "required": ["name", "type"],
      "additionalProperties": false,
      "description": "Represents a boolean checkbox field in forms and tables",
      "examples": [
        {
          "type": "Checkbox",
          "name": "termsAccepted",
          "required": true
        }
      ],
      "title": "Checkbox"
    },
    "MultipleAttachmentFieldTableSchema": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "required": {
          "type": "boolean"
        },
        "onMigration": {
          "type": "object",
          "properties": {
            "replace": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "type": {
          "type": "string",
          "const": "MultipleAttachment"
        }
      },
      "required": ["name", "type"],
      "additionalProperties": false,
      "description": "Represents a field that can store multiple file attachments",
      "examples": [
        {
          "type": "MultipleAttachment",
          "name": "documents",
          "required": true
        }
      ],
      "title": "Multiple attachment"
    },
    "UrlFieldTableSchema": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "required": {
          "type": "boolean"
        },
        "onMigration": {
          "type": "object",
          "properties": {
            "replace": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "type": {
          "type": "string",
          "const": "Url"
        }
      },
      "required": ["name", "type"],
      "additionalProperties": false,
      "description": "Represents a field that stores a URL",
      "examples": [
        {
          "type": "Url",
          "name": "website",
          "required": true
        }
      ],
      "title": "Url"
    },
    "SingleAttachmentFieldTableSchema": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "required": {
          "type": "boolean"
        },
        "onMigration": {
          "type": "object",
          "properties": {
            "replace": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "type": {
          "type": "string",
          "const": "SingleAttachment"
        }
      },
      "required": ["name", "type"],
      "additionalProperties": false,
      "description": "Represents a field that can store a single file attachment",
      "examples": [
        {
          "type": "SingleAttachment",
          "name": "profilePicture",
          "required": true
        }
      ],
      "title": "Single attachment"
    },
    "BucketSchema": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      },
      "required": ["name"],
      "additionalProperties": false,
      "description": "Type alias for bucket storage configuration",
      "title": "Bucket"
    },
    "IntegrationSchema": {
      "type": "object",
      "properties": {
        "airtable": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AirtableIntegrationSchema"
          }
        },
        "notion": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NotionIntegrationSchema"
          }
        },
        "pappers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PappersIntegrationSchema"
          }
        },
        "qonto": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/QontoIntegrationSchema"
          }
        },
        "google": {
          "$ref": "#/definitions/GoogleIntegrationSchema"
        },
        "gocardless": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GoCardlessIntegrationSchema"
          }
        },
        "phantombuster": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PhantombusterIntegrationSchema"
          }
        },
        "calendly": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CalendlyIntegrationSchema"
          }
        },
        "youcanbookme": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/YouCanBookMeIntegrationSchema"
          }
        }
      },
      "additionalProperties": false,
      "description": "Defines configurations for various third-party service integrations",
      "title": "Integrations"
    },
    "AirtableIntegrationSchema": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "baseUrl": {
          "type": "string"
        },
        "apiKey": {
          "type": "string"
        },
        "databaseId": {
          "type": "string"
        }
      },
      "required": ["apiKey", "databaseId", "name"],
      "additionalProperties": false,
      "description": "A configuration schema for Airtable integration",
      "examples": [
        {
          "name": "main-database",
          "apiKey": "key1234567890ABCD",
          "databaseId": "app1234567890ABCD"
        }
      ],
      "title": "Airtable"
    },
    "NotionIntegrationSchema": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "baseUrl": {
          "type": "string"
        },
        "token": {
          "type": "string"
        },
        "pollingInterval": {
          "type": "number"
        }
      },
      "required": ["name", "token"],
      "additionalProperties": false,
      "description": "A configuration schema for Notion integration",
      "examples": [
        {
          "name": "project-management",
          "token": "secret_1234567890ABCD",
          "pollingInterval": 300000
        }
      ],
      "title": "Notion"
    },
    "PappersIntegrationSchema": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "baseUrl": {
          "type": "string"
        },
        "apiKey": {
          "type": "string"
        }
      },
      "required": ["apiKey", "name"],
      "additionalProperties": false,
      "description": "A configuration schema for Pappers integration",
      "examples": [
        {
          "name": "company-data",
          "apiKey": "1234567890ABCD"
        }
      ],
      "title": "Pappers"
    },
    "QontoIntegrationSchema": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "baseUrl": {
          "type": "string"
        },
        "organisationSlug": {
          "type": "string"
        },
        "secretKey": {
          "type": "string"
        },
        "stagingToken": {
          "type": "string"
        }
      },
      "required": ["name", "organisationSlug", "secretKey"],
      "additionalProperties": false,
      "description": "A configuration schema for Qonto banking integration",
      "examples": [
        {
          "name": "business-account",
          "organisationSlug": "my-company",
          "secretKey": "1234567890ABCD",
          "stagingToken": "staging_1234567890ABCD"
        }
      ],
      "title": "Qonto"
    },
    "GoogleIntegrationSchema": {
      "type": "object",
      "properties": {
        "mail": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MailGoogleIntegrationSchema"
          }
        }
      },
      "additionalProperties": false,
      "description": "A configuration schema for Google integration",
      "title": "Google"
    },
    "MailGoogleIntegrationSchema": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "baseUrl": {
          "type": "string"
        },
        "user": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      },
      "required": ["name", "password", "user"],
      "additionalProperties": false,
      "description": "A configuration schema for Gmail integration",
      "examples": [
        {
          "name": "support-email",
          "user": "support@company.com",
          "password": "app-specific-password"
        }
      ],
      "title": "Mail"
    },
    "GoCardlessIntegrationSchema": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "baseUrl": {
          "type": "string"
        },
        "accessToken": {
          "type": "string"
        }
      },
      "required": ["accessToken", "name"],
      "additionalProperties": false,
      "description": "A configuration schema for GoCardless payment integration",
      "examples": [
        {
          "name": "payment-processing",
          "accessToken": "live_1234567890ABCD"
        }
      ],
      "title": "GoCardless"
    },
    "PhantombusterIntegrationSchema": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "baseUrl": {
          "type": "string"
        },
        "apiKey": {
          "type": "string"
        }
      },
      "required": ["apiKey", "name"],
      "additionalProperties": false,
      "description": "A configuration schema for Phantombuster automation integration",
      "examples": [
        {
          "name": "linkedin-automation",
          "apiKey": "1234567890ABCD"
        }
      ],
      "title": "Phantombuster"
    },
    "CalendlyIntegrationSchema": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "baseUrl": {
          "type": "string"
        },
        "user": {
          "type": "object",
          "properties": {
            "accessToken": {
              "type": "string"
            }
          },
          "required": ["accessToken"],
          "additionalProperties": false
        }
      },
      "required": ["name", "user"],
      "additionalProperties": false,
      "description": "A configuration schema for Calendly scheduling integration",
      "examples": [
        {
          "name": "scheduling",
          "user": {
            "accessToken": "1234567890ABCD"
          }
        }
      ],
      "title": "Calendly"
    },
    "YouCanBookMeIntegrationSchema": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "baseUrl": {
          "type": "string"
        },
        "user": {
          "type": "object",
          "properties": {
            "username": {
              "type": "string"
            },
            "password": {
              "type": "string"
            }
          },
          "required": ["username", "password"],
          "additionalProperties": false
        }
      },
      "required": ["name", "user"],
      "additionalProperties": false,
      "description": "A configuration schema for YouCanBookMe scheduling integration",
      "title": "YouCanBookMe"
    }
  }
}
